#+title:     함께 자라기
#+author:    다시보기
#+email:     soomtong@gmail.com

:REVEAL_PROPERTIES:
#+reveal_theme: night
#+reveal_plugins: markdown notes
#+options: timestamp:nil toc:1 num:nil
:END:

* 책 소개

함께 자리기

애자일로 가는 길

#+ATTR_HTML: :width 45% :align center
http://localhost:1313/presentation/1/agile-coach-book.jpeg

** 김창준

애자일 마스터

기업/그룹 강의

http://agile.egloos.com/

** 조금 삐딱하게 보기

* 들어가며

** 솔플 vs 팀플

요즘, 임팩트를 남기려면 혼자서는 되는게 없다.

*** 예전에는?

- 예전엔 있었다
- 많은 천재들

#+attr_reveal: :frag (appear)
우리와 먼 이야기들...
#+attr_reveal: :frag (appear)
요즘은 어떤가?

#+begin_notes
그 시절 천재들은 이 세계를 만들었고 지금도 있고 미래를 변화시키고 있다.
#+end_notes

*** 너무 커져버린 세계

#+attr_reveal: :frag (appear)
- 복잡한 이해 관계
- 나비 효과

#+begin_notes
약자를 돕는 것은 과연 정의인가?
그래도 약자는 있습니다.
#+end_notes

#+attr_reveal: :frag (appear)
어쩌라고...

** 유다희

#+ATTR_HTML: :width 45% :align center
http://localhost:1313/presentation/1/you-died.jpeg

실패할 기회가 주어지는가?

*** 도전의 기회가 부족함

#+attr_reveal: :frag (appear)
- 우리나라는 특히 더?
- 다 때가 있다

#+attr_reveal: :frag (appear)
실패할 수 있는 시기가 정해져 있다?

*** 노동자의 멍에 1

꼭 자라야 하는가? → 학습

- 돈과 명예
- 시간과 자유

#+attr_reveal: :frag (appear)
기본 소득이 필요하다!

#+begin_notes
삼천포에 빠지지 말고...
#+end_notes

*** 노동자의 멍에 2

#+attr_reveal: :frag (appear)
혼자 할 수 없는가? → 협력

#+attr_reveal: :frag (appear)
- 무엇을 하고 싶은가에 따라 다르다
- 혼자 이룰게 많이 없음 → 너무 커져버린 세계

*** 이래선 안된다

우리에게 주어진 현실적인 목표는 무엇인가?

#+attr_reveal: :frag (appear)
- 범위를 좁혀 정의해 보자
- 매일매일 자라기? → 너무 힘든거 아니냐...

* 자라기

** 야생 학습

- 협력을 기반으로 비 순차적이며
- 자료에 구애받지 않고 평가하기 어려고
- 정답도 없고 목표가 분명하지 않은 학습.

제도권 학교의 학습과 다르다.

#+begin_notes
: 야생 학습의 특성
→ 졸림 포인트;
#+end_notes

*** 불확실성

불확실성이 높을수록 야생 학습이 중요시 된다.

- 변하는 목표
- 계획의 수정

#+attr_reveal: :frag (appear)
과연 그런가?

#+begin_notes
불확실성이 높다는 것은 목표가 변한다는 것이고
목표가 변하는 이유는 계획이 변경되기 때문이다.

→ 이에 대한 근거로 세상이 불확실해졌다 하는데 다른 근거가 필요하다;

아이키도(합기도) 수파리 1단계에서 시작되는 비상식에 대한 비판.

→ 과연 필요 없나?
#+end_notes

** 연차

*** '경험' 이라는 요소

평가는 단순하지 않고 경험도 무시할 수 없다.

*** 상관성 1

- 연차와 직무 성과의 상관성은 0.18 수준
- 학력에 대해서는 0.10 수준.

0.20 이하는 크게 상관 없다고 평가할 수 있다.

*** 상관성 2

- 인턴쉽
- 지능 테스트
- 구조화된 인터뷰
- 성격 점검
- 레퍼런스 체크

#+begin_notes
반면, 작업 샘플 테스트(인턴쉽 비슷), 지능 테스트, 구조화된 인터뷰를 통한 대상자의 상관성이 0.5 이상이었고
성실함 등의 성격 점검, 레퍼런스 체크 등이 뒤를 이었다.

→ 연차는 낮을수록 가치가 있었고 높을수록 편차가 클 것으로 기대한다.
#+end_notes

#+attr_reveal: :frag (appear)
연차와 실력은 무관할 수 있지만 경험과 실력도 무관할까?

*** Latte is horse

- 경험과 문제 이해
- 요구사항 파악

#+begin_notes
경험이 많은 사람들일수록 문제를 이해하는데 더 많은 시간과 노력을 기울인다.

→ 요구사항 파악이 중요하다.
#+end_notes

*** 진짜 실력

실력이 뛰어난 사람은 문제를 이해하는 데 시간을 적게 쓴다.

#+begin_notes
하지만, 실력이 뛰어난 사람은 문제를 이해하는 데 시간을 적게 쓴다.

→ 빨리 이해하기 때문이겠지.
#+end_notes

#+attr_reveal: :frag (appear)
누구를 채용해야 하는가?

*** 협업과 성장

엔지니어링 → 효율 → 돈 → 인건비

#+begin_notes
채용에 있어서 경력보다 협업 능력이 중요할 수 있다.

→ 협업의 중요성에 대한 가스라이팅이 시작된다.
#+end_notes

#+attr_reveal: :frag (appear)
그리고 잘 성장시키기도 중요하다.

*** 100K lines of code

1만 시간의 법칙. → 10만 라인의 코드...

*** 의도적 수련

- 칫솔질 비유
- 걷기 비유

- 연주자의 공연 시간
- 선수의 토너먼트 시간

#+begin_notes
이 주장의 저자도 설명하고 있는 부분으로 의도적 수련에 대한 방법을 제안하는 것이다.

의도적 수련 시간에 포함되지 않는다.
#+end_notes

*** Agile === Agility + Iteration

- 의도적 수련
- 피드백

#+begin_notes
의도적 수련에 시간을 늘리는 방법이 있는데...

→ 애자일 등장. 평가/피드백을 빠른 주기로 얻는 것.
#+end_notes

#+attr_reveal: :frag (appear)
의미있는 수련을 바탕으로
#+attr_reveal: :frag (appear)
평가와 피드백을 빠른 주기로 얻는 것!

** 자기계발

*** 하루 평균 1~2 시간

#+begin_notes
운동이나 다른 취미 활동 시간 포함 아닙니까?

출퇴근이 30분 이내 입니까?
#+end_notes

직장인 통계 자기계발 시간

이 시간은 복리로 동작한다.

#+attr_reveal: :frag (appear)
→ 과연 이 시간을 낼 수 있을까?

*** 복리의 매커니즘

진짜 복리로 동작하게 하려면 꾸준해야 한다.

#+begin_notes
이게 어려운 건데 정말 꾸준히 해야 한다.
#+end_notes

*** 작업의 구분

- A: 원래 할 일,
- B: 원래 할 일을 개선,
- C: 원래 할 일을 개선하는 걸 개선하는 일!

#+begin_notes
작업 구분 A, B, C 중 C 단계를 도달할 수 있는 조직이 되어야 한다. 요즘 내가 신경 쓰고 지향하는 부분.

더글러스 앵겔바트: 마우스, GUI, 하이퍼텍스트 등을 고안; Human Augmentation 프로젝트

→ 일반 조직이 일하는 구조 도안과 복리 조직이 일하는 구조 도안은 매우 중요하다.
#+end_notes

*** 복리 조직이 되자

#+begin_notes
팀웍, 개인 성격, 근무 환경, 조직의 방향... 너무 많은 요소들이 있다.
#+end_notes

*** 진보와 성장

- 뭔가를 뒤에 남겨두고 앞으로 가는 것,
- 성장을 가리고 있다.

성장은 우리 안에 뭔가를 남겨두고 커진다.

*** 부트스트랩

소프트웨어 자신에게도 자주 사용되는 용어;

- 부팅
- 특이점

#+begin_notes
→ 일종의 특이점 도달이라고 볼 수 있다.

→ A, B, C 작업에서 우리는 어떤 수준의 작업에 얼마나 시간을 쓰고 있나?
#+end_notes

*** 완벽한 도구와 환경에 집착하지 말 것

#+begin_notes
'방이 조용해지고 배도 안 고프고 온도도 적당해지면 공부해야지' 이런 사고방식을 가진 훌륭한 사람은 없다.
→ 아 힘들다...
#+end_notes

** 학습과 실행

*** 고난과 역경

- 환경: 실행 프레임
- 태도: 학습 프레임

#+attr_reveal: :frag (appear)
학습 프레임이 갖추어진 주니어의 기대치가 높다.

#+begin_notes
업무 환경에서 실행 프레임은 필수 요소로 여겨지고 있지만 학습 프레임은 터부시 되기도 한다.
하지만 학습 프레임으로 업무를 수행해 가는 주니어는 더 높은 기대치를 가지게 된다.

→ 이게 정말 중요한 부분 같다. 말하자면 '태도' 인데, 이 안에는 높은 성장 가능성을 담고 있다.
#+end_notes

** 학습하기 힘든 직업

*** 일자리

- 특이점
- 전산화에 병목이 되는 구간

지각과 조작, 창의적 지능, 사회적 지능

#+begin_notes
→ 일자리의 미래는 기본 소득 실현에 있다.

비 인간으로 대체되는 이득(소득)을 분배하는 방법으로 풀어낸다. 그리고 아직 특이점은 오지 않았고 비관적 의견도 많다.

전산화에 병목이 되는 구간: 지각과 조작, 창의적 지능, 사회적 지능
#+end_notes

*** 코딩하기도 힘든데...

컴퓨터 프로그래머 vs 소프트웨어 개발자

#+begin_notes
직업으로 급 나누기, 자본주의 시스템 안에서 차별되는 인격.

코더, 프로그래머, 엔지니어: 엔지니어링 특성 때문에 스스로를 엔지니어라 부르고 있다.

→ 주는 만큼 하면 됩니다?
#+end_notes

*** 협상과 설득 능력

협상과 설득이 왜 필요한가?

#+begin_notes
→ 할수 있는 한, 직업(노동)의 가치는 퇴색되더라도 모두 고부가 업종에 일할 필요도 없고 사회를 이런 경쟁으로 몰아가면 안된다.
#+end_notes

** 전문성

강한 동기(motivation), 구체적이고 적절한 타이밍의 피드백

*** 직관

직관이 가치를 가지려면 타당해야 하고, 피드백을 받을 수 있어야 한다.

- 인과관계와 규칙성
- 예측 가능성

#+begin_notes
타당한 직관이란 보통 어떠한가?
인과 관계가 있고 규칙성이 보여야 한다. 예측 가능한 모델을 가지고 있어야 피드백이 가능하다.
#+end_notes

*** 전문성이 필요한 곳

타당성과 피드백이 없는 환경에서는 전문성을 높일 수 없다.

*** 오픈소스 컨트리뷰션

소프트웨어 개발은 중간 정도 가진다.

#+begin_notes
→ 오픈소스 프로젝트 참여와 활동은 전문성을 드러내는 매우 좋은 조건;
#+end_notes

** 의도적 수련

양적인 부분, 그리고 질적인 부분을 고려해야 한다.

*** 난이도와 몰입

#+begin_notes
적절한 난이도를 통한 몰입을 통해 제자리 걸음을 벗어나자.
#+end_notes

#+attr_reveal: :frag (appear)
- 익숙한 도구를 멀리하기
- 작업 시간을 단축하기
- 익숙한 작업을 다른 언어로
- 리팩토링
- 자동화 테스트

*** Simple and Possible

- Divide & Conquer

#+begin_notes
천리길도 한 걸음 부터; 분할 정복.
#+end_notes

** 프로그래밍 학습

*** 적극적 읽기

- 뭘 만들지 생각하고 문서를 읽기
- 할만한 단계가 되면 읽기를 멈추고 코딩

*** 읽을거리

Pervasive 코드

#+begin_notes
표준 라이브러리 코드 읽기
#+end_notes

*** 토이 프로젝트를 넘어

- 커뮤니티 참여
- 피드백 경험

토이 프로젝트 구현을 넘어 기여하는 코드 작성

#+begin_notes
커뮤니티 참여와 피드백 경험
#+end_notes

*** No hello

질문을 잘하자.

전문성을 얻어내기 위한 전문가 되기.

- Cognitive interview

** 실수 관리

*** 실수 발견

실수 예방이 아니라 실수를 조기에 발견하고 관리할 것.

#+attr_reveal: :frag (appear)
→ 세상이 엉망이 아닌 이유;

#+begin_notes
트위터 사례들
#+end_notes

*** 심리적 안정감

심리적 안정감도 문화의 일부. 실수 훈련 같은 기법도 활용.

#+attr_reveal: :frag (appear)
→ 실수 격리 노하우가 필요하다.

#+begin_notes
트위터 사례들
#+end_notes

** 뛰어난 선생과 좋은 선생 그리고 전문가

*** 가르치기

아무리 좋은 가르침에도...

- 평균 70% 는 가르치지 않은 것 투성이
- 자동화 된 요소들은 암묵적이 되어버림

*** 메타 인지

가르치는 사람의 메타 인지 능력에 따라

학업성취도 영향에 큰 효과를 가져다 준다.

*** 인터렉션

뛰어난 연구자는 같은 부탁을 해도

훨신 짧은 시간에 타인의 도움을 받아냄.

뛰어난 개발자일수록

타인과 인터렉션에 더 많은 시간을 사용함.

#+begin_notes
→ 동료와 협력은 어느 도메인이나 중요하다.

→ 잘못된 전문가의 이미지는 많이 개선되고 있지 않나...
#+end_notes

*** 마이크로 인터렉션 in 뛰어난 프로그래머

프로그래밍 실력은 좋은데

의사소통 능력은 부족하다라는 평가는 변했다.

#+attr_reveal: :frag (appear)
프로그래밍을 잘 한다의 정의에

#+attr_reveal: :frag (appear)
뛰어난 의사소통 능력이 포함되어 있다.

*** 마이크로 인터렉션 강화 훈련

주변 사람들과 매일 주고 받는

인사, 대화, 문답 등에 신경을 쓰도록;

* 함께

** 소프트웨어 관리 개선

일을 잘 나눌 수 있는 때는

프로젝트가 완료된 시점

#+begin_notes
→ 시사하는 바가 크다.
#+end_notes

*** 조엘 테스트

조엘 온 소프트웨어의

조엘 테스트를 맹신하지 말라.

#+attr_reveal: :frag (appear)
이것도 제대로 못하는게 현실인데?

*** 좋은 도구

비싼 툴이 대부분 더 좋은게 사실

#+begin_notes
추가로 그 다음 나오는 소프트웨어 품질 관리 항목도 중요.
#+end_notes

*** 소프트웨어 품질 관리

1. 복잡한 상황을 이해 → 계획을 수립 → 또는 변경
2. 관찰하고 적응 그리고 이해
3. 적절하게 행동

*** 장인과 도구

지속 가능 개발

Sustainable Development

#+begin_notes
따로 시간 잡아서 핸즈온 하고 싶네요.
#+end_notes

*** 소프트웨어 개발 비용

- 개발에 들어가는 모든 도구,
- 사람들의 능력과 경험,
- 시스템의 복잡도,
- 인원을 배정하고 작업을 분배하고 조정하며 위임,
- 모니터링과 동기부여,
- 작업 환경 개선,
- 빠른 리스크 파악 및 조치,
- 요구사항과 스펙을 검증...

등에 들어가는 비용의 합.

#+begin_notes
단지 인건비의 문제가 아님
#+end_notes

*** 조직의 규모에 따라

Case by case

#+attr_reveal: :frag (appear)
우리 회사 개발팀(실)의 경우...

#+begin_notes
→ 어쨋든 관리 비용이 매우 큰 건 사실

단지 인건비의 문제가 아니다. 조직이 커질수록 이 비용은 늘어난다.
통계적으로 도구나 인건비는 개선의 여지가 많지 않았다.
그래도 조엘 테스트의 가치가 사라지는 것은 아니다.
해커들의 세계에서는 조엘 테스트가 효과적인 지표;
#+end_notes

*** 약은 약사에게 진료는 의사에게

하지만 관리자가 도구에 집작하는 것은

패착이 될 확률이 높아짐

#+attr_reveal: :frag (appear)
도구는 도구를 다루는 사람이 잘 압니다...

** 협력의 추상화

소프트 스킬

- 커뮤니케이션 능력
- 협업 능력

*** 뛰어난 프로그래머에 대한 정의

소프트 스킬에 대한 관심이 늘어나고 있다.

#+begin_notes
→ 하지만 하드 스킬에 대한 목표도 명확히 있어야 하지 않을까?

(추가로 소개해 볼 예정)
#+end_notes

*** 시그마 모델과 파이 모델

집단의 퍼포먼스 측정 모델

#+attr_reveal: :frag (appear)
협업의 장점이 없어 보이는 경우가 종종 있다.

*** 파이 모델의 효율

파이 모델이 효과를 내기 위해 필요한 조건들이 있다.

#+attr_reveal: :frag (appear)
시각화 도구(중간 매개체)를 통해 커뮤니케이션해야 한다.

#+begin_notes
: 베스트 퍼포먼스 조건

한 팀 또는 파트에 두 명
시니어 1 주니어 1 정도가 이상적...
#+end_notes

*** 협업과 커뮤니케이션 비용

톱니바퀴 실험에서 협업 모델의 참여자들이

추상화 규칙을 찾아내는 속도가 빨랐다.

커뮤니케이션을 위해

추상화 단계가 필요했기 때문이다.

*** ETC - Easy to change

- Indirectinal

디자인 패턴을 공부하며 배우는

대부분의 주제가 담고 있는 목표.

*** 어떻게?

추상화를 높이는 쉬운 방법은 협업하기

#+begin_notes
→ 어떻게?

일단 대화하고 그림을 그려보고 코드를 편집해 보자.
#+end_notes

** 신뢰와 공유

신뢰 자산이 높을수록 커뮤니케이션 비용이 낮아진다.

*** Trust me I am dog

#+ATTR_HTML: :width 25% :align center
http://localhost:1313/presentation/1/trust-me.png

*** 소통 신뢰

신뢰를 샇는데 필요한 건

- 투명성
- 공유
- 상호 피드백

*** 뒤통수 치는 분들이 너무 많아서...

*** 공유의 한계

- 하나를 공유할 때, 최선의 최소를 공유할 때는
- 신뢰도 평가 점수가 좋지 않았다.
- 대신, 모든 것을 공유할 때 신뢰도가 높아졌다.
- 공유물과 자신을 동일시 하지 않게 해야 한다.

#+begin_notes
코드도 마찬가지
#+end_notes

** 객관성의 주관성

*** 설명하기

IT업계에서 사용되는 용어가

자연어가 아니기 때문에

설명을 잘 하는 것도 능력이 된다.

#+begin_notes
→ 이건 제가 강의를 좀 해 봐서 잘 압니다.
#+end_notes

*** 상대적 품질

품질은 상대적이다.

설득에는 객관성이 필요하다.

#+begin_notes
→ 갑자기 설득 얘기로 들어가는데... 설득은 객관성이 필요하다는 주제를 억지로 가져온거 아닌가?
#+end_notes

*** 그동안의 신뢰는 어디가고...

*** 객관성의 주관성

결국 결정하는 것은 사람이기 때문에

객관성은 주관적일 수 밖에 없다.

#+begin_notes
→ AI 도 편향하더라...
#+end_notes

*** 설득과 신뢰

즉, 감성과 이성을 분리하는 것은 불가능하다.

설득을 하려면 신뢰가 필요하다.

*** 성향과 기질

MBTI?

** 코칭 기법

홍춘이가 잘못했다.

#+begin_notes
→ 나의 잘못이지만 교육 방법의 차이는 있다.

나는 그의 맨탈 모델을 이해하고 가이드를 준 것이기 때문이고 이에 대한 신뢰도 구축되어 있다고 판단했다.
#+end_notes

*** '이것도 모르세요?'

#+attr_reveal: :frag (appear)
vs

#+attr_reveal: :frag (appear)
'이런거 알려주는 사람 나 밖에 없어.'

*** 공감하고 이해하기 위한 대화 방법

*** 행동을 유도하는 대화 방법

*** 피코치가 행동할 수 있도록 유도하는 방법

** 컨텍스트 전환

- Concurrency
- Threshing

#+begin_notes
→ 일정 산출하고 기한에 맞추는 개발 방식을 버려야 하는 이유...
#+end_notes

*** 탑다운과 바텀업

당연히 뛰어난 전문가는

탑다운과 바텀업을 섞어 문제를 해결한다.

*** 엔지니어링

- 비용의 문제

#+attr_reveal: :frag (appear)
복잡하고 어려운 문제일수록 사고흐름은 예측할 수 없고

#+attr_reveal: :frag (appear)
추상성이 높아졌다가 낮아졌다가를 반복한다.

*** '일정 산출해주세요.'

#+attr_reveal: :frag (appear)
vs

#+attr_reveal: :frag (appear)
'언제까지 돼요?'

*** 인류보안계획

#+attr_html: :width 55% :align center
http://localhost:1313/presentation/1/plan-failed.jpeg

*** 힘든 과제이니 철저하게 계획하고

단계별로 접근하자 라는 명제는 수준 낮은 접근 방법이다.

#+attr_reveal: :frag (appear)
실제로 전문가일수록 자신의 계획을 수정하는 경우가 많다.

*** 스크럼

컨텍스트 유지 비용을 낮추는 방법

*** 소수의 인원이 모든 역할을 하는 방법

*** 컨텍스트 전환이 쉽도록 협업 상태를 개선하는 방법

*** 둘 다 가능한 조직을 만드는 방법...

#+attr_reveal: :frag (appear)
의사소통이 원활해야 한다.

#+begin_notes
→ 소통할 맥락을 효과적으로 전달하기 위해 컨텍스트를 공유하고 있어야 하는데 이게 쉽지 않다.

지식이나 학습의 차이, 경험과 이해의 차이 때문에 커뮤니케이션 비용이 높아진다.
결국 소수의 전문가 모델이 되는 경향이 오게 되는데...

모두 전문가가 되면 되겠구나?
#+end_notes

#+attr_reveal: :frag (appear)
사실은?

*** 모두 전문가가 되면 되겠구나!

*** New Normal

물리적인 거리: 가까울수록 좋은데...

#+begin_notes
→ 원격 근무가 가진 한계로 지적되고 있다.
#+end_notes

** 실패하는 전문가

협업하지 않는 전문가 집단은

비전문가 집단보다 못한 성과를 내는 경향이 있다.

*** 소셜 스킬이 높은 제너럴리스트가 필요한 이유

** 탁월한 팀 유지

*** 심리적 안정감이 중요

** 학습 속도

어려운 일일수록 새로운 학습이 필요하고

이전 경험과 지식은 학습 속도에 영향을 주지 않을수 있다.

*** 리더와 학습 속도

대신 리더가 팀 학습 속도에 영향을 준다.

팀 리더는 팀원을 뽑을 때부터 협동적이었다.

선발 기준도 단순 업무 수행 능력이 아니었다.

*** Don't be cynical. don't be serious, also

냉소는 별로 도움이 안됨.

#+begin_notes
→ 제가 자주 얘기하는 don't be cynical 에 이유가 있습니다. 여러분...
#+end_notes

** 프로젝트 성공의 요소

*** PERT

통계상 추정시간의 2~3 배를 곱해야

80% 정도의 확률로 마무리 할 수 있었다.

#+begin_notes
→ 완전 사실.
#+end_notes

*** 업무 공유

공유되지 않는 업무는 제 시간에 완성되기 어렵다.

#+begin_notes
→ 업무를 분배하는 매니저도 이해하고 있어야 하는 사실.

나눠서 하는 일의 한계...
#+end_notes


* 애자일 방법론

** 필요할 때 하자.

#+attr_reveal: :frag (appear)
잘 모름;

* 뛰어난 하드 스킬

가이드

** 상황 판단 능력

상황/현상을 판단하는 능력이 필요한데...

#+begin_notes
이건 나이나 경력과 일치하지 않는다. 당연히 영향력이 높다고 좋은 건 아니다.
#+end_notes

** 코드 쓰기

- 의도와 맥락 이해
- 고민과 해결 제공

*** 적절한 설명

코드가 아니더라도...

- PR 본문
- 커밋 로그

*** 상황 이해

왜 이런 코드가 생산되었는지...

*** 고민의 흔적

문제 해결을 위해 제시한 방법(주로 PR) 이외에

또 다른 방법이 있는지 고민할 수 있는 선택지를 제공한다.

#+begin_notes
예를 들면;

추가로 조건에 따른 처리가 필요하다면, 분기문 처리를 위해 이 분기가 왜 발생했는지 더 나은 방법이 있는지 같은 걸 고민하고 확인한다.

null 처리를 위해 단순 null 비교가 아니라 왜 null 이 발생하여 여기까지 오게 되었는지를 고민하는 것이지.
#+end_notes

*** 의도 파악

- 예전 코드가 왜 이렇게 작성되었는지 이해하고
- 작업자의 의도를 이해하여 변경하며
- 다음 작업은 어떤게 이어져야 하는지 알려준다.

프로젝트의 맥락을 잘 파악하기;

** 가이드라인 지키기

가이드라인을 잘 따르고

코드 품질을 신경쓰면서

기술부채가 어떤지 알고 있어야 한다.

*** 코드 품질

시간에 양보하지 말자.

*** 기술 부채 파악

*** 분위기 파악

답답한 부분은 무엇이고

어떤 분위기로 협업이 이루어지는지

눈치채고 있어야 한다.

*** Be careful with legacy code :)

#+attr_html: :width 55% :align center
https://pbs.twimg.com/ext_tw_video_thumb/1568693335698853888/pu/img/HBnHQIsk3faK81Fp.jpg

#+begin_notes
'체스터슨 울타리' 라고 함

- https://twitter.com/dylayed/status/1569000499361480708
- https://twitter.com/addyosmani/status/1568693483845877760
#+end_notes

*** 시야

단순히 이 기능에 대한/이 버그에 대한 해결이 아니라

종합적인 면으로 전체 솔루션의 맥락을 이해해야 한다.

#+attr_reveal: :frag (appear)
작은 변경이라도 전체를 조망하고 있어야 한다.

*** 변경에 대한 책임

메인테이너가 아니더라도

코드 변경에 대한 책임감을 느껴고 있어야 한다.

** 절대적 시간과 여유

*** 완성도 높은 코드를 작성하기 위해서는

#+attr_reveal: :frag (appear)
당연히 그만큼의 시간이 필요함.

*** 적당한 여유가 주어진다면

#+attr_reveal: :frag (appear)
적당한 품질의 코드가 나오는 것은 당연함.

*** 일정 초과하고 야근하는 작업자의 코드가

#+attr_reveal: :frag (appear)
좋은 품질의 코드가 나오는 것을 기대하면 안됨.

*** 유연하고 합리적인 계획이 있어야

코더는 무리하지 않고 일정을 지킬수 있으며

그런 코더가 최고의 코드를 작성할 수 있게 된다.

** - eof -
