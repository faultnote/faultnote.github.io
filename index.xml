<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>FaultNote</title><link>https://faultnote.github.io/</link><description>Recent content on FaultNote</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><managingEditor>soomtong@gmail.com (soomtong)</managingEditor><webMaster>soomtong@gmail.com (soomtong)</webMaster><lastBuildDate>Sat, 19 Feb 2022 14:46:31 +0900</lastBuildDate><atom:link href="https://faultnote.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript 50 Lessons Part 3</title><link>https://faultnote.github.io/posts/typescript-50-lessons-3/</link><pubDate>Sat, 19 Feb 2022 14:46:31 +0900</pubDate><author>soomtong@gmail.com (soomtong)</author><guid>https://faultnote.github.io/posts/typescript-50-lessons-3/</guid><description>타입스크립트 in 50 레슨 스테판 바움가트너가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다. Lesson 15 타입스크립트는 값을 생성하</description><content>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
타입스크립트 in 50 레슨
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
&lt;a href="https://fettblog.eu/">스테판 바움가트너&lt;/a>가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p>
&lt;div id="outline-container-headline-2" class="outline-3">
&lt;h3 id="headline-2">
Lesson 15
&lt;/h3>
&lt;div id="outline-text-headline-2" class="outline-text-3">
&lt;pre class="example">
타입스크립트는 값을 생성하는 영역과 타입을 생성하는 영역으로 구분, 함수는 값을 생성
&lt;/pre>
&lt;p>
함수는 선언부와 본문으로 구성된다. `declare` 키워드는 함수의 본문을 구현하지 않고 코드를 구성할 수 있게 해준다. 인자부와 반환부에 타입을 선언할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">declare&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Result&lt;/span>[]&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>실제 구현을 하게 되면 이 함수는 비동기로 작동하는데 데이터 fetch 를 위해 `fetch` 함수를 사용하기로 가정하면, 자바스크립트의 fetch 는 `Promise&amp;lt;any&amp;gt;` 를 반환하기 때문에 이 값을 Result 타입으로 캐스팅하여 타입 세이프한 환경을 구성할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[]) {
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">`/search&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">queryString&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>)
.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>() &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;)
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>`as` 키워드는 좌측의 값을 우측의 타입으로 처리한다. 함수 선언부에 반환 정보를 정의하는 것과 같은 역할을 한다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt; {
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">`/search&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">queryString&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>)
.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">response&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">response&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>())
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>저자는 함수 선언부에 사용하는 것을 선호한다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Lesson 16
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;pre class="example">
함수 인자의 콜백 함수에 타입을 정의하여 타입 시스템을 강화
&lt;/pre>
&lt;p>
`typeof` 연산을 함수에 적용하면 함수의 타입을 알 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">SearchFn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">SearchFn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">query&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[] &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
함수 인자를 `Query` 라는 타입으로 정의해 보자.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Query&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">query&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[],
&lt;span style="color:#a6e22e">assemble&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">includeTags&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>&amp;#39;assemble&amp;#39; 인자는 함수 타입을 가지고 이 함수는 includeTags 를 받아서 string 을 반환하는 콜백 함수인 것을 알 수 있다. 물론 이렇게 개선할수도 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">AssembleFn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">includeTags&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Query&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">query&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[], &lt;span style="color:#a6e22e">assemble&lt;/span>: &lt;span style="color:#66d9ef">AssembleFn&lt;/span> }&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
콜백 함수를 사용하는 코드는 특정 기능을 끼워넣을 수 있는 함수로 패턴화 된다.
브라우저의 특정 엘리먼트에서 값을 받아 다른 엘리먼트로 노출하는 함수를 정의한다면 아래와 같이 확장이 가능하다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">declare&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">displaySearch&lt;/span>(
&lt;span style="color:#a6e22e">inputId&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">outputId&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">search&lt;/span>: &lt;span style="color:#66d9ef">SearchFn&lt;/span>
)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이 함수는 반환하는 값이 없다. (그냥 바깥 세상에 사이드이펙트만 발생시킨다.) `void` 는 lesson 17 에서 조금 더 알아본다.&lt;/p>
&lt;p>
`구조적 타입 시스템` 에서 함수 인자의 타입 정보는 이름에 제약되지 않고 인자의 전달 순서에 따라 제약된다. 아래 두 함수는 같은 타입 정보를 가진다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">testSearch&lt;/span>: &lt;span style="color:#66d9ef">SearchFn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>, &lt;span style="color:#a6e22e">tags&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>.&lt;span style="color:#a6e22e">resolve&lt;/span>([{
&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`The &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">query&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> test book`&lt;/span>,
&lt;span style="color:#a6e22e">url&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">query&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">-design-patterns`&lt;/span>,
&lt;span style="color:#66d9ef">abstract&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`A practical book on &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">query&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
}])
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">testSearch&lt;/span>: &lt;span style="color:#66d9ef">SearchFn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>, &lt;span style="color:#a6e22e">options&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>.&lt;span style="color:#a6e22e">resolve&lt;/span>([{
&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`The &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">term&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74"> test book`&lt;/span>,
&lt;span style="color:#a6e22e">url&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`/&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">term&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">-design-patterns`&lt;/span>,
&lt;span style="color:#66d9ef">abstract&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">`A practical book on &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">term&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
}])
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>위 코드의 경우 &amp;#39;tags&amp;#39; 나 &amp;#39;options&amp;#39; 는 사용되지 않고 있다. 구조적 타입 시스템에서 이 두 번째 인자를 생략해도 타입 점검을 정상적으로 완료한다. 이어지는 레슨에서 이 타입들을 좀 더 다듬어 볼 예정이다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-3">
&lt;h3 id="headline-4">
Lesson 17
&lt;/h3>
&lt;div id="outline-text-headline-4" class="outline-text-3">
&lt;pre class="example">
대체가능성
&lt;/pre>
&lt;p>
이전 코드의 함수 본문에서 첫 번째 인자도 사용하지 않는다면 선언하지 않아도 된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">dummyContentSearchFn&lt;/span>: &lt;span style="color:#66d9ef">SearchFn&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>() {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>.&lt;span style="color:#a6e22e">resolve&lt;/span>([{
&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Form Design Patterns&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">url&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;/form-design-patterns&amp;#39;&lt;/span>,
&lt;span style="color:#66d9ef">abstract&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;A practical book on accessible forms&amp;#39;&lt;/span>
}])
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
자바스크립트에서 함수는 인자의 개수에 따라 주의해야할 케이스가 있다. 필요한 인자가 없는 경우와 인자가 너무 많은 경우인데 함수를 실행할 때 필요한 인자가 없는 경우 런타임에 실행 실패한다. 인자가 너무 많은 경우 초과된 인자 그냥 무시된다.
이런 오류들은 타입스크립트를 적용하면 사전 점검된다.&lt;/p>
&lt;p>
&amp;#39;SearchFn&amp;#39; 을 사용하는 displaySearch 함수의 인자로 콜백 함수를 전달하는데 SearchFn 의 모양을 가지면 사용할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">displaySearch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;input&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;output&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">dummyContentSearchFn&lt;/span>)&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이를 대체 가능성이라 한다.&lt;/p>
&lt;p>
대체 가능성은 반환하는 값의 타입이 일치하면 이루어진다. 위 코드의 경우 두 콜백 함수 모두 배열 결과를 담은 promise 함수를 반환하고 있다.&lt;/p>
&lt;p>
타입스크립트의 `void` 는 다른 프로그래밍 언어에서 사용하는 void 와 조금 다르다.
자바스크립트의 모든 함수는 기본적으로 undefined 를 반환한다. 타입스크립트에서도 모든 함수는 반환 타입이 있다. 타입 추론이 어려울 경우 기본적으로 `void` 타입을 반환한다. void 타입의 하나의 값이 있는데 그 값은 &amp;#39;undefined&amp;#39; 이다.&lt;/p>
&lt;p>
void 타입은 모든 반환 타입에 대해 대체 가능하다. 콜백 함수가 void 반환인 경우 number 를 반환해도 타입 점검은 성공한다. 하지만 실제 반환되는 타입은 undefined 이기 때문에 다른 연산은 할 수 없다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">query&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;span style="color:#a6e22e">callback&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">results&lt;/span>: &lt;span style="color:#66d9ef">Result&lt;/span>[]) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>,
&lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[]) {
&lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">`/search&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#a6e22e">queryString&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>)
.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">res&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>() &lt;span style="color:#66d9ef">as&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;)
.&lt;span style="color:#a6e22e">then&lt;/span>(&lt;span style="color:#a6e22e">results&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">didItWork&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">callback&lt;/span>(&lt;span style="color:#a6e22e">results&lt;/span>)
&lt;span style="color:#a6e22e">didItWork&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#ae81ff">2&lt;/span>
})
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이 경우 didItWork 는 undefined 를 가지기 때문에 컴파일에 실패한다.
바닐라 자바스크립트에서도 void 를 사용하여 함수의 실행 결과를 undefined 시킬 수 있다.&lt;/p>
&lt;p>
함수의 반환 타입을 `void` 에서 `undefined` 로 변경하면 대체 가능성을 제거할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">callback&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">results&lt;/span>: &lt;span style="color:#66d9ef">Result&lt;/span>[]) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>,&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>그리고 옵셔널 파라미터는 가장 마지막에 전달하는게 관행이다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Lesson 18
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;pre class="example">
콜백 함수의 첫 인자에 명시적으로 this 를 추가하고 타입을 부여할 수 있다.
&lt;/pre>
&lt;p>
displaySearch 함수를 작성하는 과정에 this 를 사용하게 되는데 this.value 같은 경우 타입 추론이 실패하여 컴파일이 되지 않는다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">displaySearch&lt;/span>(&lt;span style="color:#a6e22e">inputId&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">outputId&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">search&lt;/span>: &lt;span style="color:#66d9ef">SearchFn&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span> {
document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#a6e22e">inputId&lt;/span>)&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;change&amp;#39;&lt;/span>, &lt;span style="color:#66d9ef">function&lt;/span> () {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">parentElement&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">classList&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;active&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">searchTerm&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>
})
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>DOM 엘리먼트도 타입스크립트를 위해 타입을 제공하고 있다. 타입을 좁혀 타입스크립트 컴파일러가 추론이 가능하도록 개선해 본다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript"> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">parentElement&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">classList&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;active&amp;#39;&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> &lt;span style="color:#a6e22e">HTMLInputElement&lt;/span>) {
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">searchTerm&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이어서 이 addEventListner 의 콜백을 별도의 함수로 분리하면 this 는 콜백 함수의 첫 번째 인자로 this 의 타입을 정의해 줄 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">inputChangeHandler&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">HTMLElement&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">parentElement&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">classList&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;active&amp;#39;&lt;/span>)
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이 인자는 타입스크립트만을 위한 정보로 컴파일된 자바스크립트에는 사라지게된다.&lt;/p>
&lt;div class="src src-javascript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">inputChangeHandler&lt;/span>() {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">parentElement&lt;/span>&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">classList&lt;/span>.&lt;span style="color:#a6e22e">add&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;active&amp;#39;&lt;/span>);
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>그리고 this 를 포함한 함수는 호출되는 컨텍스트에 따라 달라지기 때문에 this 를 HTMLElement 타입으로 추론할 수 없는 위치에서 호출하게 되면 컴파일 되지 않는다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Lesson 19
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;pre class="example">
함수 타입의 추가 기능들
&lt;/pre>
&lt;p>
tagged template 함수는 함수 호출에 &amp;#39;(인자)&amp;#39; 대신 &amp;#39;`인자`&amp;#39; 를 사용한다. 태그드 템플릿은 템플릿 문자 배열과 대상이 되는 문자열 표현식으로 구분된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">taggedTemplate&lt;/span>&lt;span style="color:#e6db74">`템플릿A&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">표현식&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">템플릿B`&lt;/span>
&lt;span style="color:#a6e22e">taggedTemplate&lt;/span>&lt;span style="color:#e6db74">`템플릿A&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">표현식&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">템플릿B&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">표현식&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">템플릿C`&lt;/span>
&lt;span style="color:#a6e22e">taggedTemplate&lt;/span>&lt;span style="color:#e6db74">`템플릿A&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">표현식&lt;/span>&lt;span style="color:#ae81ff">1&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">템플릿B&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">표현식&lt;/span>&lt;span style="color:#ae81ff">2&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">템플릿C&lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">표현식&lt;/span>&lt;span style="color:#ae81ff">3&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">템플릿D`&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>템플릿과 표현식은 배열로 처리되는데 표현식은 rest 연산자를 통해 표현된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">taggedTemplate&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, ...&lt;span style="color:#a6e22e">tags&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Promise 를 반환하는 경우 async 로 함수를 선언하고 await 를 통해 Promise 의 resolved 값을 받을 수 있다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-3">
&lt;h3 id="headline-7">
Lesson 20
&lt;/h3>
&lt;div id="outline-text-headline-7" class="outline-text-3">
&lt;pre class="example">
함수 오버로딩
&lt;/pre>
&lt;p>
타입스크립트는 함수 인자의 개수와 인자/반환 타입이 달라지는 경우를 위해 함수 오버로딩을 지원한다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">callback&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">results&lt;/span>: &lt;span style="color:#66d9ef">Result&lt;/span>[]) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[])&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이 경우 실제 구현 형태는 이렇게 풀이된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">p2?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[] &lt;span style="color:#f92672">|&lt;/span> ((&lt;span style="color:#a6e22e">results&lt;/span>: &lt;span style="color:#66d9ef">Result&lt;/span>[]) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>), &lt;span style="color:#a6e22e">p3?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[])&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>처음으로 `|` 를 통한 유니언 타입이 소개되고 있다.
이 함수를 타입으로 등록하면 좀 더 나은 코드를 볼 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">SearchOverload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[] &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[]&lt;/span>&amp;gt;
(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">callback&lt;/span>&lt;span style="color:#f92672">:&lt;/span> (&lt;span style="color:#a6e22e">results&lt;/span>: &lt;span style="color:#66d9ef">Result&lt;/span>[]) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>, &lt;span style="color:#a6e22e">tags?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[] &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">search&lt;/span>: &lt;span style="color:#66d9ef">SearchOverload&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">p2?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[] &lt;span style="color:#f92672">|&lt;/span> ((&lt;span style="color:#a6e22e">results&lt;/span>: &lt;span style="color:#66d9ef">Result&lt;/span>[]) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>), &lt;span style="color:#a6e22e">p3?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[]) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#75715e">// body
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-3">
&lt;h3 id="headline-8">
Lesson 21
&lt;/h3>
&lt;div id="outline-text-headline-8" class="outline-text-3">
&lt;pre class="example">
제너레이터
&lt;/pre>
&lt;p>
제너레이터는 이터레이션을 구현하기 위해 시간의 흐름에 따라 값을 생성해 제공해 준다. 타입스크립트는 다양한 타입 정보를 제공하여 제너레이터 함수를 손쉽게 사용할 수 있도록 해준다.
제너레이터 함수의 반환 타입은 아래와 유사하다. async 함수가 반환하는 Promise 와 비교해 보면 도움이 될 것이다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">Generator&lt;/span>&amp;lt;&lt;span style="color:#f92672">1&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#a6e22e">2&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#a6e22e">3&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">|&lt;/span> &lt;span style="color:#a6e22e">4&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#a6e22e">string&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#a6e22e">unknown&lt;/span>&amp;gt;&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>제너레이터는 풀링이 필요한 시스템에서 유용하다. fetch 를 통해 데이터를 받도록 하자.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">PollingResults&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">results&lt;/span>: &lt;span style="color:#66d9ef">Result&lt;/span>[]; &lt;span style="color:#a6e22e">done&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span> }
&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">polling&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Promise&lt;/span>&amp;lt;&lt;span style="color:#f92672">PollingResults&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;/...&amp;#39;&lt;/span>).&lt;span style="color:#a6e22e">then&lt;/span>((&lt;span style="color:#a6e22e">res&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">res&lt;/span>.&lt;span style="color:#a6e22e">json&lt;/span>())
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>입력이 있을 때마다 백엔드에서 쿼리를 조회하는 제너레이터 함수는 이렇게 구성된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span>&lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">getResults&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">AsyncGenerator&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[],&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#a6e22e">unknown&lt;/span>&amp;gt; {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>
&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">polling&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>)
&lt;span style="color:#66d9ef">yield&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">results&lt;/span>
} &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">done&lt;/span>)
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>AsyncGenerator 타입은 타입스크립트의 시스템 인터페이스로 등록되어 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">resultsGen&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getResults&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>);
&lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span>(&lt;span style="color:#a6e22e">results&lt;/span> &lt;span style="color:#66d9ef">of&lt;/span> &lt;span style="color:#a6e22e">resultsGen&lt;/span>) {
&lt;span style="color:#a6e22e">results&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">someFn&lt;/span>)
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>제너레이터는 이터레이터이기 때문에 `for … of` 대상이 된다.
yield 의 반환 값을 처리하기 위해 .next() 을 사용할 수 있다. `.next(value)` 를 통해 yield 의 반환 값을 받을 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript"> &lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>, &lt;span style="color:#a6e22e">stop&lt;/span>
&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;span style="color:#a6e22e">state&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">polling&lt;/span>(&lt;span style="color:#a6e22e">term&lt;/span>)
&lt;span style="color:#a6e22e">stop&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">yield&lt;/span> &lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">results&lt;/span>
} &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">state&lt;/span>.&lt;span style="color:#a6e22e">done&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">stop&lt;/span>)&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>브라우저에서 입력된 값을 사용하는 제너레이터 호출 구문은 아래처럼 구성될 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">document.&lt;span style="color:#a6e22e">getElementById&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;searchField&amp;#39;&lt;/span>)&lt;span style="color:#f92672">?&lt;/span>.&lt;span style="color:#a6e22e">addEventListener&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;change&amp;#39;&lt;/span>, &lt;span style="color:#a6e22e">handleChange&lt;/span>)
&lt;span style="color:#66d9ef">async&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">handleChange&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">HTMLElement&lt;/span>, &lt;span style="color:#a6e22e">ev&lt;/span>: &lt;span style="color:#66d9ef">Event&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span> &lt;span style="color:#66d9ef">instanceof&lt;/span> &lt;span style="color:#a6e22e">HTMLInputElement&lt;/span>) {
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">resultsGen&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">getResults&lt;/span>(&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>)
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>, &lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">do&lt;/span> {
&lt;span style="color:#a6e22e">next&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">await&lt;/span> &lt;span style="color:#a6e22e">resultsGen&lt;/span>.&lt;span style="color:#a6e22e">next&lt;/span>(&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">&amp;gt;=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>)
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span> &lt;span style="color:#f92672">!==&lt;/span> &lt;span style="color:#e6db74">&amp;#39;undefined&amp;#39;&lt;/span>) {
&lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>.&lt;span style="color:#a6e22e">map&lt;/span>(&lt;span style="color:#a6e22e">appendResultToAnswerArea&lt;/span>)
&lt;span style="color:#a6e22e">count&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">value&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>
}
} &lt;span style="color:#66d9ef">while&lt;/span> (&lt;span style="color:#f92672">!&lt;/span>&lt;span style="color:#a6e22e">next&lt;/span>.&lt;span style="color:#a6e22e">done&lt;/span>)
}
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>await 와 .next(isStop) 을 통해 비동기로 데이터를 요청하고 반환된 결과의 상태에 따라 응답읍 제공한다.
이 경우 AsynGenerator 의 타입은 이렇게 정의된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">AsyncGenerator&lt;/span>&amp;lt;&lt;span style="color:#f92672">Result&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">[],&lt;/span> &lt;span style="color:#a6e22e">void&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">,&lt;/span> &lt;span style="color:#a6e22e">boolean&lt;/span>&amp;gt;&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>로컬 웹 서비스에 Easy-RSA 인증서 적용하기</title><link>https://faultnote.github.io/posts/easyrsa-nginx-guide/</link><pubDate>Sat, 12 Feb 2022 14:05:53 +0900</pubDate><author>soomtong@gmail.com (soomtong)</author><guid>https://faultnote.github.io/posts/easyrsa-nginx-guide/</guid><description>nginx 서버에 로컬 호스트의 도메인을 위한 인증서를 적용하는 가장 쉽고 빠른 방법 개인 키/공개 키 기반 인증 시스템 PKI - Public Key Infrastructure 이해하기 우리말로 공개 키 기반 인증 시스템 으</description><content>&lt;blockquote>
&lt;p>nginx 서버에 로컬 호스트의 도메인을 위한 인증서를 적용하는 가장 쉽고 빠른 방법&lt;/p>
&lt;/blockquote>
&lt;h2 id="개인-키공개-키-기반-인증-시스템">개인 키/공개 키 기반 인증 시스템&lt;/h2>
&lt;h3 id="pki---public-key-infrastructure-이해하기">PKI - Public Key Infrastructure 이해하기&lt;/h3>
&lt;p>우리말로 &lt;code>공개 키 기반 인증 시스템&lt;/code> 으로 이해할 수 있는데, 사실 한 쌍의 키가 중심이 되지만 &amp;lsquo;공개 키&amp;rsquo; 라고 불리는 이유는 이 공개 키를 기반으로 암호화 하는 과정이 핵심이라 그런 듯 하다.&lt;/p>
&lt;p>공개 키 기반 인증은 한 쌍의 키를 전제로 한다. 만들어 진 한 쌍의 키는 하나는 공개용, 다른 하나는 비공개용 개인 키이다.&lt;/p>
&lt;h4 id="공개키-기반-암호화복호화">공개키 기반 암호화/복호화&lt;/h4>
&lt;p>PKI 를 통한 통신 과정에 암호화/복호화 작업은 기존에 보내는 사람이 주체가 되어 암호화 하는 과정에 일부 변형이 추가되었다. 암호화된 파일을 받을 대상의 공개 키로 암호화 하는 것이 핵심이다.&lt;/p>
&lt;p>인터넷에 있는 많은 참고 이미지 중 이 도식이 가장 좋은 것 같다.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/pki-brief.jpeg" alt="https://bobbyarvian.blogspot.com/2010/05/pki-public-key-infrastructure-dan-ca.html" title="PKI-public key infrastructure dan CA-certificate authority">&lt;/p>
&lt;p>나를 Sender 라 하고 받을 대상을 Recipient 라 보면, 받을 대상의 공개 키로 암호화 하여 파일을 보내면 된다.&lt;/p>
&lt;p>내가 누군가에게 암호화된 파일을 받기 위해서 내 공개 키를 제공하면 된다. 인증 관련된 서비스에서 요구하는 공개키가 이런 개념이다.&lt;/p>
&lt;blockquote>
&lt;p>예를 들면, 깃헙의 애플리케이션 연동이나 ssh 서버 연결에 사용되는 public key 가 이런 종류다.&lt;/p>
&lt;/blockquote>
&lt;p>ssh 접속의 경우 내 공개키는 각 클라이언트와 서버가 암호화된 통신을 할 때 사용된다.&lt;/p>
&lt;p>이 방식을 응용하여 메일을 교환하거나 송신, 수신되는 네트워크의 데이터들을 암호화 한다.&lt;/p>
&lt;h4 id="x509">X.509&lt;/h4>
&lt;p>X.509 는 이 공개 키 기반의 인증 시스템으로 1988년 시작되어 현재는 버전3 를 사용하고 있다. 공개 키 기반의 다른 인증 시스템과 다르게 인증 기관이라는 개념을 도입하여 상위 기관을 통해 인증을 허용하는 시스템을 구성하고 있다.&lt;/p>
&lt;p>인증서 작업에 사용되는 파일의 종류를 좀 알아두면 좋다. 대부분 모두 일반 텍스트 파일이다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>.key&lt;/code>: 개인 키 파일이다. 이 파일은 공개용이 아니다.&lt;/li>
&lt;li>&lt;code>.csr&lt;/code>: 인증 기관에 인증서를 받기 위해 요청하는 스펙을 담은 문서&lt;/li>
&lt;li>&lt;code>.crt&lt;/code>: 인증서 자체, 암호화된 인증서 파일&lt;/li>
&lt;li>&lt;code>.pem&lt;/code>: Base64 로 인코딩된 인증서로 웹 서버에 사용된다.&lt;/li>
&lt;/ul>
&lt;h4 id="브라우저-통신과-ssltls">브라우저 통신과 SSL/TLS&lt;/h4>
&lt;p>웹 서버 데이터에 대한 암호화를 위해 무한에 가까운 수의 서비스가 공개 키를 제공하고 이를 관리하기에는 효율이 좋지 않기에 제3자가 개입하여 인증을 대행하는 방식이다.&lt;/p>
&lt;p>CA (Certificate authority) 또는 Root Certificate (루트 인증 기관) 라고 불리는 기관들이 이 역할을 한다.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/ca-tls-brief.jpeg" alt="https://bobbyarvian.blogspot.com/2010/05/pki-public-key-infrastructure-dan-ca.html" title="PKI-public key infrastructure dan CA-certificate authority">&lt;/p>
&lt;p>https 통신에 사용되는 보안 프로토콜로 1999년 SSL(Secure Sockets Layer) 3.0 이 TLS(Transport Sockets Layer) 1.0 으로 공개 되었다.&lt;/p>
&lt;p>현재 SSL 버전 사용은 권고 되지 않는다.&lt;/p>
&lt;h2 id="openssl-과-easy-rsa">OpenSSL 과 Easy-RSA&lt;/h2>
&lt;p>OpenSSL 은 이런 암호화/복호화에 관여하는 프로토콜인 TLS 의 오픈소스 구현으로 다양한 시스템에 사용되고 있으며 무료 인증서로 자주 거론되는 Let&amp;rsquo;s encrypt 에서도 사용하고 있다.&lt;/p>
&lt;p>얼마 전 (2021년) 3.0 을 공개하였다.&lt;/p>
&lt;blockquote>
&lt;p>openssl 툴을 활용해 다양한 인증서 생성 및 인증 요청서를 만들수 있는데, 조금 복잡하다. 그래서 이 과정을 단순화하고 체계적으로 유지하기 위한 &amp;lsquo;easy-rsa&amp;rsquo; 가 개발되어 있고, 이를 사용하여 로컬 서비스에 인증서를 적용하는 방법을 알아보려 한다.&lt;/p>
&lt;/blockquote>
&lt;p>아마 대부분의 개발자 시스템에 openssl 은 설치되어 있을 것이다. 추가로 easy-rsa 를 설치해 보자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ brew info easy-rsa
&lt;/code>&lt;/pre>&lt;/div>&lt;p>실행 파일은 &lt;code>easyrsa&lt;/code> 이니 헷갈리지 말자.&lt;/p>
&lt;p>Public Key Infrastructure(PKI) 환경을 구성하기 위해 초기화 작업이 필요하다.
개인키가 없지 않겠지만 easyrsa 를 통해 서비스용을 하나 만들자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ easyrsa init-pki
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="macos-키체인-유틸리티">macOS 키체인 유틸리티&lt;/h3>
&lt;p>인증서를 생성하기 전에 인증서를 운영체제에서 사용하고 유지/관리하는 방법을 이해해야 한다.&lt;/p>
&lt;p>맥OS 에서 인증서는 &lt;code>Keychain Access&lt;/code> 유틸리티를 통해 관리할 수 있다. 이 안에 각종 루트 인증서들이 있고 우리가 만들 사설 루트 인증서를 추가하여 관리할 것이다.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/macos-keychain-access.png" alt="macOS Keychain Access">&lt;/p>
&lt;h3 id="시나리오">시나리오&lt;/h3>
&lt;p>주요 작업 시나리오는 다음과 같다.&lt;/p>
&lt;ol>
&lt;li>가상의 최상위 인증 기관 인증서 생성&lt;/li>
&lt;li>최상위 인증 기관의 인증서를 운영체제에 추가, 사용 허용&lt;/li>
&lt;li>인증 기관에서 상속된 서비스용 인증서 생성&lt;/li>
&lt;li>nginx 에 인증서 적용&lt;/li>
&lt;/ol>
&lt;h3 id="루트-인증서-발급">루트 인증서 발급&lt;/h3>
&lt;p>웹 브라우저는 루트 인증기관(CA)을 신뢰하고 대부분의 브라우저는 이 루트 인증서와 암호화된 통신 프로토콜을 내장하고 있다.&lt;/p>
&lt;p>실제 서비스에는 이 루트 인증기관에서 비용을 제공하고 운영할 서비스 사이트의 인증서를 발급 받아 적용해야 한다.&lt;/p>
&lt;blockquote>
&lt;p>우리가 사용할 로컬 개발 환경의 웹 서버를 위해 인증서를 구입하거나 실제 도메인이 부여되지 않은 사이트의 인증서를 발급 받기는 애매하다. 그래서 가상의 루트 인증기관을 만들어 루트 인증서를 생성하고 이 기관을 통해 로컬 서비스의 인증서를 생성해 웹 서버에 적용할 것이다.&lt;/p>
&lt;/blockquote>
&lt;h4 id="ca-만들기">CA 만들기&lt;/h4>
&lt;p>easyrsa 를 통해 루트 인증기관의 인증서를 쉽게 생성할 수 있다. 이 과정은 CA 에 대한 조직 정보를 포함한다. easyrsa 는 &lt;code>Easy-RSA CA&lt;/code> 을 사용한다. 그대로 쓰자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ easyrsa build-ca
&lt;/code>&lt;/pre>&lt;/div>&lt;p>생성된 인증서는 &lt;code>/usr/local/etc/pki/ca.crt&lt;/code> 에서 확인할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ cat /usr/local/etc/pki/ca.crt
&lt;/code>&lt;/pre>&lt;/div>&lt;p>이 과정은 다음 내용을 포함하고 있다.&lt;/p>
&lt;ol>
&lt;li>루트 인증기관을 위한 개인 키를 만들고 → &lt;code>.key&lt;/code> 파일&lt;/li>
&lt;li>인증 서명 요청서를 만들고 → &lt;code>.csr&lt;/code> 파일&lt;/li>
&lt;li>x509 서명까지 완성한다 → &lt;code>.crt&lt;/code> 파일&lt;/li>
&lt;/ol>
&lt;p>만들어진 루트 인증서 내용은 easyrsa 를 통해 확인할 수 있다. 기본적으로 10년 짜리 서명을 제공해 준다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ easyrsa show-ca
Using SSL: /usr/local/opt/openssl@1.1/bin/openssl OpenSSL 1.1.1m &lt;span style="color:#ae81ff">14&lt;/span> Dec &lt;span style="color:#ae81ff">2021&lt;/span>
Showing details &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#e6db74">&amp;#39;ca&amp;#39;&lt;/span>.
This file is stored at:
/usr/local/etc/pki/ca.crt
...
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="keychain-access-에-추가-및-허용">KeyChain Access 에 추가 및 허용&lt;/h4>
&lt;p>&lt;code>File &amp;gt; Import Item&lt;/code> 메뉴를 통해 위에서 생성한 루트 인증서를 추가하고 안전한 사용을 허용하자.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/macos-keychain-access-permit-root-cert.png" alt="macOS Keychain Access">&lt;/p>
&lt;p>이 작업 후에는 로그아웃 하고 다시 로그인 하여 시스템에 인증서가 적재되도록 한다.&lt;/p>
&lt;h3 id="로컬-서비스용-인증서-발급">로컬 서비스용 인증서 발급&lt;/h3>
&lt;p>이제 우리가 사용할 로컬 서비스의 서버 인증서 만들자.&lt;/p>
&lt;p>마찬가지로 서버 용 비공개 키를 만들고 루트 인증 기관의 인증을 받아 서버 인증서를 만든다. 복잡한 절차가 있지만 easyrsa 로 단순하게 처리할 수 있다.&lt;/p>
&lt;p>이 과정에서 &lt;code>localhost&lt;/code> 라는 파일 이름 기반의 식별자를 사용하였다. 이 부분을 xxx-server 등으로 자유롭게 변경하여 사용할 수 있다.&lt;/p>
&lt;h4 id="멀티-호스트-인증">멀티 호스트 인증&lt;/h4>
&lt;p>내 경우 관리하는 호스트가 여러 개이다 보니 멀티 호스트 인증을 하면 하나의 인증서로 다중 도메인을 처리할 수 있다. &lt;code>EASYRSA_EXTRA_EXTS&lt;/code> 환경 변수에 추가할 도메인 정보를 담아 생성할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ export EASYRSA_EXTRA_EXTS&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;subjectAltName=DNS.1:local.site-a,DNS.2:local.site-b&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="서버-인증서-생성">서버 인증서 생성&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ easyrsa build-server-full localhost nopass
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>nopass&lt;/code> 옵션은 인증서의 사용 과정에 패스워드를 적용하지 않는 옵션이다.&lt;/p>
&lt;blockquote>
&lt;p>서버 인증서는 nginx 등의 서버를 구동할 때마다 패스워드를 요구해서 보통 패스워드 없이 생성한다.&lt;/p>
&lt;/blockquote>
&lt;p>이렇게 생성된 인증서는 &lt;code>/usr/local/etc/pki/issued&lt;/code> 에 저장되어 있다.&lt;/p>
&lt;p>앞 부분에는 인증 대상의 정보가 있고 아래에 인증서 정보가 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ cat /usr/local/etc/pki/issued/localhost.crt
$ easyrsa show-cert localhost
...
X509v3 Extended Key Usage:
TLS Web Server Authentication
X509v3 Key Usage:
Digital Signature, Key Encipherment
X509v3 Subject Alternative Name:
DNS:local.site-a, DNS:local.site-b, DNS:local.site-c, DNS:local.site-d
...
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>Subject Alternative Name:&lt;/code> 항목에 다중 도메인이 기록된 것을 확인할 수 있다.&lt;/p>
&lt;h4 id="nginx-용-인증서-조립">nginx 용 인증서 조립&lt;/h4>
&lt;p>이렇게 생성된 인증서를 웹 서버에 사용하기 위해 조립 과정을 거쳐야 한다.&lt;/p>
&lt;p>핵심은 서버 인증서와 루트 인증서를 결합하여 웹 서버에 맞는 인증서 파일을 생성하는 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ cat -p /usr/local/etc/pki/issued/localhost.crt &lt;span style="color:#ae81ff">\
&lt;/span>&lt;span style="color:#ae81ff">&lt;/span> /usr/local/etc/pki/ca.crt &amp;gt; ./server.pem
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>오리지널 cat 대신 bat 을 사용하고 있어 &lt;code>-p&lt;/code> 옵션이 추가되었다.&lt;/p>
&lt;/blockquote>
&lt;p>이렇게 생성된 파일과 서버의 키 정보를 nginx conf 에 추가하자.&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-conf" data-lang="conf">ssl_certificate [server.pem 이 있는 경로]/server.pem;
ssl_certificate_key /usr/local/etc/pki/private/localhost.key;
&lt;/code>&lt;/pre>&lt;p>easyrsa 가 없었으면 아래와 여러 단계의 과정을 거쳐야 했을 것이다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ openssl ecparam -out server.key -name prime256v1 -genkey
$ openssl req -new -sha256 -key server.key -out server.csr -config ./openssl-host.conf
$ openssl x509 -req -sha256 -days &lt;span style="color:#ae81ff">365&lt;/span> -in server.csr -CA /usr/local/etc/pki/ca.crt -CAkey /usr/local/etc/pki/private/ca.key -CAcreateserial -out server.crt
$ openssl x509 -in server.crt -text -noout
&lt;/code>&lt;/pre>&lt;/div>&lt;p>물론 openssl 을 통해 생성된 인증서를 점검할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ openssl x509 -in /usr/local/etc/pki/issued/localhost.crt -text -noout
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://faultnote.github.io/posts/images/ngixn-certi-localhost.png" alt="certified localhost in nginx">&lt;/p>
&lt;h4 id="인증서-관리">인증서 관리&lt;/h4>
&lt;p>&lt;code>easyrsa&lt;/code> 는 &lt;code>renew&lt;/code> 나 &lt;code>revoke&lt;/code> 등의 명령이 제공된다.&lt;/p>
&lt;p>revoke 하더라도 기존 .key 파일이나 .csr 등의 파일을 지워주는 것이 아니니 따로 삭제해줘야 한다.&lt;/p>
&lt;p>도메인 추가 정도라면 EASYRSA_EXTRA_EXTS export 를 수정하고 renew 하면 된다.&lt;/p></content></item><item><title>TypeScript 50 Lessons Part 2</title><link>https://faultnote.github.io/posts/typescript-50-lessons-2/</link><pubDate>Sat, 22 Jan 2022 12:40:51 +0900</pubDate><author>soomtong@gmail.com (soomtong)</author><guid>https://faultnote.github.io/posts/typescript-50-lessons-2/</guid><description>타입스크립트 in 50 레슨 스테판 바움가트너가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다. Lesson 9 any 괜찮은가? 아니, 안괜찮</description><content>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
타입스크립트 in 50 레슨
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
&lt;a href="https://fettblog.eu/">스테판 바움가트너&lt;/a>가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p>
&lt;div id="outline-container-headline-2" class="outline-3">
&lt;h3 id="headline-2">
Lesson 9
&lt;/h3>
&lt;div id="outline-text-headline-2" class="outline-text-3">
&lt;pre class="example">
any 괜찮은가? 아니, 안괜찮음
&lt;/pre>
&lt;p>
타입스크립트에서 `:` 을 통해 정의되는 타이핑 기법을 레프트핸드 타이핑이라고 한다.&lt;/p>
&lt;ul>
&lt;li>Left-Hand Typing: 식별자에 선언되는 타입 정보를 통해 타입을 정의한다.&lt;/li>
&lt;li>Right-Hand Typing: 식별자에 대입되는 값 정보를 통해 타입이 추론된다.&lt;/li>
&lt;/ul>
&lt;p>라이트핸드 타이핑은 조금 더 자바스크립티 하다.&lt;/p>
&lt;p>
`any` 타입은 가능하면 사용하지 말자.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Lesson 10
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;pre class="example">
조건문을 추가하여 타입을 제한을 우회하기
&lt;/pre>
&lt;p>
타입 좁히기 기법은 비교/조건문을 통해 any 나 unknown 이 주는 위험을 보완할 수 있다.&lt;/p>
&lt;ol>
&lt;li>타입 가드: typeof 같은 연산을 통해 타입 정보를 추론할 수 있다.&lt;/li>
&lt;li>타입 비교 구문: 타입 가드를 통해 추론된 타입 정보로 이어지는 코드의 식별자에 대해 타입을 추론한다.&lt;/li>
&lt;li>타입 좁히기: any 타입이 적용된 식별자라 하더라도 타입을 제한할 수 있게 된다.&lt;/li>
&lt;/ol>
&lt;p>`any` 는 모든 타입의 수퍼 타입이다. 예를 들면, DOM 에서 `HTMLElement` 는 모든 HTML 엘리먼트의 수퍼 타입이다. 그래도 `any` 가 필요한 경우에는 `unknown` 으로 타협하자.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">selectDeliveryAddress&lt;/span>(&lt;span style="color:#a6e22e">addressOrIndex&lt;/span>: &lt;span style="color:#66d9ef">unknown&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">addressOrIndex&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;number&amp;#39;&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">deliveryAddresses&lt;/span>[&lt;span style="color:#a6e22e">addressOrIndex&lt;/span>]
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">addressOrIndex&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이 경우 unknown 타입은 number 타입으로 추론되어 string 을 반환하는 함수에 적합하지 않은 타입을 반환하게 된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">addressOrIndex&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;number&amp;#39;&lt;/span> &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#a6e22e">addressOrIndex&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">deliveryAddresses&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">deliveryAddresses&lt;/span>[&lt;span style="color:#a6e22e">addressOrIndex&lt;/span>]
} &lt;span style="color:#66d9ef">else&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">addressOrIndex&lt;/span> &lt;span style="color:#f92672">===&lt;/span> &lt;span style="color:#e6db74">&amp;#39;string&amp;#39;&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">addressOrIndex&lt;/span>
}
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이렇게 조건문을 추가하여 타입 가드를 완성한다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-3">
&lt;h3 id="headline-4">
Lesson 11
&lt;/h3>
&lt;div id="outline-text-headline-4" class="outline-text-3">
&lt;pre class="example">
객체에 타입 정보를 추가하면서 구조적 타입 시스템과 과잉 속성 점검 기능을 이해하기
&lt;/pre>
&lt;p>
두 개의 최상위 타입 any 와 unknown 도 타입스크립트 전용의 원시 타입이다.
객체는 컴포지트 타입에 속한다. Shape 이 다른 경우 타입 오류를 유발한다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Article&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>,
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>,
&lt;span style="color:#a6e22e">stock&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>,
&lt;span style="color:#a6e22e">description&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">movie&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Helvetica&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">6.66&lt;/span>,
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">0.19&lt;/span>,
&lt;span style="color:#a6e22e">stock&lt;/span>: &lt;span style="color:#66d9ef">1000&lt;/span>,
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>description 이 누락되어 타입 에러이다. 만약 타입에 정의된 프로퍼티 이외의 프로퍼티를 추가해도 타입 에러를 낸다. 그런데 이런 경우는 에러를 찾아내지 못한다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">movieRated&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Helvetica&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">6.66&lt;/span>,
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">0.19&lt;/span>,
&lt;span style="color:#a6e22e">stock&lt;/span>: &lt;span style="color:#66d9ef">1000&lt;/span>,
&lt;span style="color:#a6e22e">description&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;90 minutes of gushing about Helvetica&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">rating&lt;/span>: &lt;span style="color:#66d9ef">5&lt;/span>,
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">movie&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">movieRated&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>타입스크립트의 구조적 타입 시스템에 따라 구조적 계약을 이행하는 조건이라면 타입 체크를 통과한다.&lt;/p>
&lt;p>
조금 깊게 본다면 대입문을 통해 새로운 식별자에 객체를 지정하는 과정(객체 할당)에 객체 주소의 복사가 일어나기 때문이다. 즉, 대입문을 통한 객체 할당 과정에서 계약 조건을 만족하면 타입 체크를 통과하는 것으로 이해할 수 있다.&lt;/p>
&lt;p>
그리고, 타입이 정의된 식별자 이름과 무관하게 모양이 같으면 같은 타입으로 혼용할 수 있다.&lt;/p>
&lt;blockquote>
&lt;p>타입스크립트의 타입 시스템은 친절하다고 소개하고 있지만 노미널 타입을 선호하는 사용자에게는 조금 부실하다.&lt;/p>
&lt;/blockquote>
&lt;p>
레프트핸드 타이핑이 동작 가능한 경우 과잉 속성 점검 기능을 통해 식별자에 대입시 초과되는 속성을 검사하여 오류를 제공한다. 물론 부족한 속성이 있어도 오류다.&lt;/p>
&lt;p>
함수의 인자로 객체를 전달할 때 타입 정의를 포함할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">createArticleElement&lt;/span>(&lt;span style="color:#a6e22e">article&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
}
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">createArticleElement&lt;/span>(&lt;span style="color:#a6e22e">article&lt;/span>&lt;span style="color:#f92672">:&lt;/span> { &lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span> })&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>명시적으로 풀어 사용해도 모양만 맞으면 된다. 당연히 과잉 속성 점검 기능도 동작한다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#a6e22e">createArticleElement&lt;/span>({
&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Design Systems by Alla Kholmatova&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">20&lt;/span>,
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">0.19&lt;/span>,
&lt;span style="color:#a6e22e">rating&lt;/span>: &lt;span style="color:#66d9ef">5&lt;/span>,
})&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Lesson 12
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;pre class="example">
객체 타입을 구분하기
&lt;/pre>
&lt;p>
복잡한 객체 구조가 있을 경우 객체 타입을 나눠서 새 객체 타입을 구성하는 방법을 소개하고 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">OrderComplex&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">articles&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
}[]
&lt;span style="color:#a6e22e">customer&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">address&lt;/span>&lt;span style="color:#f92672">:&lt;/span> {
&lt;span style="color:#a6e22e">city&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">zip&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">street&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">number&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#a6e22e">dateOfBirth&lt;/span>: &lt;span style="color:#66d9ef">Date&lt;/span>
}
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이런 구성의 객체 타입은 풀어 쓰면 이렇게 된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ArticleStub&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Address&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">city&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">zip&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">street&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#66d9ef">number&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Customer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">name&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">address&lt;/span>: &lt;span style="color:#66d9ef">Address&lt;/span>
&lt;span style="color:#a6e22e">dateOfBirth&lt;/span>: &lt;span style="color:#66d9ef">Date&lt;/span>
}
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Order&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">articles&lt;/span>: &lt;span style="color:#66d9ef">ArticleStub&lt;/span>[]
&lt;span style="color:#a6e22e">customer&lt;/span>: &lt;span style="color:#66d9ef">Customer&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
다양한 기능으로 무장한 타입스크립트의 `typeof` 연산자를 통해 실제 객체 변수에 저장된 값을 추론해 새로운 타입으로 등록할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Order&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">typeof&lt;/span> &lt;span style="color:#a6e22e">someOrder1&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
옵셔널 프로퍼티 선언을 통해 유연한 타입 시스템을 구성할 수 있다. 강타입을 구현하면서 Null safety 를 실현하는 모던 프로그래밍 언어의 특징 중 하나이다.&lt;/p>
&lt;p>
이렇게 정의된 타입만 공유하기 위해 `import type` `export type` 구문을 사용할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// some-example.ts file
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Article&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">stock?&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">description?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">import&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> { &lt;span style="color:#a6e22e">Article&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./some-example&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">book&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">29&lt;/span>,
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">0.2&lt;/span>,
&lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Another book by Smashing Books&amp;#39;&lt;/span>,
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Lesson 13
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;pre class="example">
객체 타이핑
&lt;/pre>
&lt;p>
타입스크립트가 자바스크립트로 컴파일 되는 동안 값 정보만 남고 우리가 추가한 타입 정보는 사라지게 된다. 하지만 클래스는 그 자체로 타입 정보와 값 정보를 가지고 있는 특징이 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Discount&lt;/span> {
&lt;span style="color:#a6e22e">isPercentage&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span>
&lt;span style="color:#a6e22e">amount&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">isPercentage&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span>, &lt;span style="color:#a6e22e">amount&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">isPercentage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">isPercentage&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">amount&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">amount&lt;/span>
}
&lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#a6e22e">article&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">isPercentage&lt;/span>) {
&lt;span style="color:#a6e22e">article&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">article&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#a6e22e">article&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">amount&lt;/span>
} &lt;span style="color:#66d9ef">else&lt;/span> {
&lt;span style="color:#a6e22e">article&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">article&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">-&lt;/span> &lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">amount&lt;/span>
}
}
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>클래스는 두 파트로 구성되는데 생성자와 프로토타입으로 나뉜다. 프로토타입은 객체의 모양을 정의하고 생성자에 의해 실체화 된다. 타입스크립트의 구조적 타이핑 기법에 따라 아래는 `Discount` 객체를 생성해 낼 수 있게 된다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">DiscountType&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">isPercentage&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span>
&lt;span style="color:#a6e22e">amount&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#a6e22e">article&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>
}
&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">disco&lt;/span>: &lt;span style="color:#66d9ef">DiscountType&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> &lt;span style="color:#a6e22e">Discount&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>)&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>구조적 타입 시스템에서 중요한 것은 오직 모양이다. 그 이름은 무의미하다.&lt;/p>
&lt;p>
클래스는 상속을 통해 확장할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TwentyPercentDiscount&lt;/span> &lt;span style="color:#66d9ef">extends&lt;/span> &lt;span style="color:#a6e22e">Discount&lt;/span> {
&lt;span style="color:#66d9ef">constructor&lt;/span>() {
&lt;span style="color:#66d9ef">super&lt;/span>(&lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#ae81ff">0.2&lt;/span>)
}
&lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#a6e22e">article&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (&lt;span style="color:#a6e22e">article&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span>) {
&lt;span style="color:#66d9ef">super&lt;/span>.&lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#a6e22e">article&lt;/span>)
}
}
&lt;span style="color:#a6e22e">isValidForDiscount&lt;/span>(&lt;span style="color:#a6e22e">article&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">article&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">40&lt;/span>
}
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-4">
&lt;h4 id="headline-7">
구조적 타입 시스템과 명명형 타입 시스템
&lt;/h4>
&lt;div id="outline-text-headline-7" class="outline-text-4">
&lt;p>최근 프로그래밍 언어의 타입 시스템은 두 종류로 구분할 수 있다.&lt;/p>
&lt;ul>
&lt;li>Nominal Typing 을 가지는 언어: C++, Java 등; 클래스의 이름이 다르면 다른 타입이다.&lt;/li>
&lt;li>Structural Typing 을 가지는 언어: Ocaml, Haskell, TypeScript, Go 등; 클래스의 모양이 같으면 같은 타입이다. 덕 타이핑 등의 용어가 이 사상에서 나온다.&lt;/li>
&lt;/ul>
&lt;p>각각의 장단점이 있고 혼용되기도 한다. 타입스크립트를 명명형 타입 시스템처럼 사용하기 위한 기법도 많이 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://michalzalecki.com/nominal-typing-in-typescript/">Nominal typing techniques in TypeScript&lt;/a> 를 참고하자.&lt;/li>
&lt;/ul>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-3">
&lt;h3 id="headline-8">
Lesson 14
&lt;/h3>
&lt;div id="outline-text-headline-8" class="outline-text-3">
&lt;pre class="example">
인터페이스는 객체를 특정하는 제약
&lt;/pre>
&lt;p>
타입 시스템에는 인터페이스가 항상 따라오는데 타입스크립트에서도 마찬가지다. 객체지향 프로그래밍에서 인터페이스는 클래스를 기술하는 명세라고 볼 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Article&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">stock?&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">description?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
}
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">ShopItem&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">stock?&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">description?&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>구조적 타입 시스템에서 위 둘은 같은 모양을 가지고 있고 혼용이 가능하다.
클래스에 인터페이스를 구현하기 위해 아래와 같이 사용한다. 명세를 구현하는 것이다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">DVD&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">ShopItem&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">9.99&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">vat&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.2&lt;/span>
}
}
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Book&lt;/span> &lt;span style="color:#66d9ef">implements&lt;/span> &lt;span style="color:#a6e22e">Article&lt;/span> {
&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>
&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
&lt;span style="color:#66d9ef">constructor&lt;/span>(&lt;span style="color:#a6e22e">title&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) {
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">title&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">title&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">39&lt;/span>
&lt;span style="color:#66d9ef">this&lt;/span>.&lt;span style="color:#a6e22e">vat&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.2&lt;/span>
}
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
인터페이스와 타입은 같은 목적으로 사용되는 듯 해 보인다. 타입스크립트 코딩을 오래할수록 타입을 사용하기 위해 인터페이스를 사용하게 될 것이라고 조언하고 있다. 그 첫 이유는 선언을 병합하여 사용할 수 있는 점 때문이다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">declare&lt;/span> &lt;span style="color:#66d9ef">global&lt;/span> {
&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Window&lt;/span> {
&lt;span style="color:#a6e22e">isDevelopment&lt;/span>: &lt;span style="color:#66d9ef">boolean&lt;/span>
}
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Window 타입에 인터페이스를 추가하여 안전한 코드를 작성하는 예를 보여준다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">Discount&lt;/span> {
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">apply&lt;/span>(&lt;span style="color:#a6e22e">article&lt;/span>: &lt;span style="color:#66d9ef">Article&lt;/span>) {
&lt;span style="color:#66d9ef">if&lt;/span> (window.&lt;span style="color:#a6e22e">isDevelopment&lt;/span>) {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;Another discount applied&amp;#39;&lt;/span>)
}
}
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>점진적으로 자바스크립트를 확장해가며 빨간 줄을 만나지 않기 위한 노력을 하고 있다.&lt;/p>
&lt;ol>
&lt;li>타입스크립트 컴파일러는 자바스크립트로 변환하면서 타입 어노테이션을 잃어버린다.&lt;/li>
&lt;li>타입스크립트의 `any` 는 어느 타입에도 대응 가능한 고유한 원시 타입이다.&lt;/li>
&lt;li>이 `any` 는 타입스크립트의 점진적 타입 개선 과정에 도움이 된다.&lt;/li>
&lt;li>타입 가드 기법을 통해 타입을 추론이 동작하는 과정을 알아보았고 `typeof` 연산자는 타입 정보를 반환하는 기능도 가지고 있다.&lt;/li>
&lt;li>구조적 타입 시스템에 대해 살펴보았다.&lt;/li>
&lt;li>타입을 구성하는 다양한 방법을 알았다.&lt;/li>
&lt;li>객체지향 프로그래밍의 클래스는 값으로도 동작하고 타입으로도 동작하는 것을 알았다.&lt;/li>
&lt;li>인터페이스를 통해 타입 선언을 병합하는 방법이 있음을 알았다.&lt;/li>
&lt;/ol>
&lt;p>타입스크립트는 자바스크립트에 영향을 주고 있다.&lt;/p>
&lt;ol>
&lt;li>접근 제어자가 있다. (최근 자바스크립트에 도입되었다.)&lt;/li>
&lt;li>추상 클래스 개념이 있다.&lt;/li>
&lt;li>열거형을 선언할 수 있다.&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>TypeScript 50 Lessons Part 1</title><link>https://faultnote.github.io/posts/typescript-50-lessons-1/</link><pubDate>Fri, 21 Jan 2022 20:47:53 +0900</pubDate><author>soomtong@gmail.com (soomtong)</author><guid>https://faultnote.github.io/posts/typescript-50-lessons-1/</guid><description>타입스크립트 in 50 레슨 스테판 바움가트너가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다. https://typescript-book.com/ 다루고 있는 주제는 아래와 같다</description><content>
&lt;div id="outline-container-headline-1" class="outline-2">
&lt;h2 id="headline-1">
타입스크립트 in 50 레슨
&lt;/h2>
&lt;div id="outline-text-headline-1" class="outline-text-2">
&lt;p>
&lt;a href="https://fettblog.eu/">스테판 바움가트너&lt;/a>가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://typescript-book.com/">https://typescript-book.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>다루고 있는 주제는 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>타입스크립트의 컨셉과 이해하기&lt;/li>
&lt;li>타입스크립트 툴 사용법과 효과적인 사용법&lt;/li>
&lt;li>뭔가 새로 배우지 않고 타입스크립트를 사용하는 법&lt;/li>
&lt;li>구조적 타입 시스템과 시멘틱 그리고 이게 왜 중요한지 이해하기&lt;/li>
&lt;li>유지 관리가 적은 타입을 만들고 재사용하는 법과 점진적으로 개선시키는 법&lt;/li>
&lt;li>프로젝트에 적합한 타입 시스템을 적용하는 법&lt;/li>
&lt;li>타입스크립트 커뮤니티와 언어가 개선되는 과정&lt;/li>
&lt;/ul>
&lt;p>기술적으로 다루는 내용은 아래와 같다.&lt;/p>
&lt;ul>
&lt;li>빨간 줄을 지워가는 과정&lt;/li>
&lt;li>타입을 다루는 방법&lt;/li>
&lt;li>함수와 함수 타입&lt;/li>
&lt;li>유니언 타입과 인터섹트 타입&lt;/li>
&lt;li>제너릭 (타입ed 클래스, 타입 파라미터)&lt;/li>
&lt;li>컨디셔널 타입&lt;/li>
&lt;li>프로그래밍과 타입에 대한 고민&lt;/li>
&lt;/ul>
&lt;p>홈페이지에서 예제 코드를 함께 제공하고 있다.&lt;/p>
&lt;div id="outline-container-headline-2" class="outline-3">
&lt;h3 id="headline-2">
Lesson 1
&lt;/h3>
&lt;div id="outline-text-headline-2" class="outline-text-3">
&lt;pre class="example">
빨간 줄을 활성화 하기
&lt;/pre>
&lt;p>
VSCode 기준으로 강의를 진행하고 있고 빨간 줄을 줄이자! 를 목표로 안전한 코딩을 하기 위해 타입스크립트가 어떤 도움을 주고 있는지 안내하고 있다.&lt;/p>
&lt;p>
코딩 과정에서 타입이 제공되면서 함수를 호출하고 인자를 처리하는데 단순한 오탈자 뿐 아니라 코드를 이해하고 적용하는 방법도 소개하고 있다.&lt;/p>
&lt;p>
&amp;#39;//@ts-check&amp;#39; 를 통해서 기존 자바스크립트에서 개선하는 노하우도 알려주고 있다.&lt;/p>
&lt;div class="src src-js">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#75715e">//@ts-check
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">max&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>,
&lt;span style="color:#a6e22e">items&lt;/span>&lt;span style="color:#f92672">:&lt;/span> []
}
Object.&lt;span style="color:#a6e22e">defineProperty&lt;/span>(&lt;span style="color:#a6e22e">storage&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;max&amp;#39;&lt;/span>, { &lt;span style="color:#a6e22e">readonly&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>, &lt;span style="color:#a6e22e">val&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">5000&lt;/span> })&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-3" class="outline-3">
&lt;h3 id="headline-3">
Lesson 2
&lt;/h3>
&lt;div id="outline-text-headline-3" class="outline-text-3">
&lt;pre class="example">
타입 추론 기능으로 버그를 찾자
&lt;/pre>
&lt;p>
찾을 수 없는 프로퍼티를 사용해 발생하는 버그를 소개로 챕터를 시작한다.
이건 매뉴얼 보면서 코드를 작성하면 나오지 않을 문제긴 하지만 보통 실행 과정에서 예외가 발생하는 경우로 버그를 발견하고 해결하기 시작한다.&lt;/p>
&lt;p>
왜 빨간 줄이 그어지는지에 대한 내용으로 타입 추론에 대해 소개하고 있다. 약(Weak) 타입 언어 환경에서 식별자에 대한 타입을 추론하고 코딩 과정에서 해당 식별자의 타입을 제안하여 안전한 코드를 만들어가는 과정을 제안한다.&lt;/p>
&lt;div class="src src-js">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">currentStorage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>
&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">storageUsed&lt;/span>() {
&lt;span style="color:#a6e22e">currentStorage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">currentStorage&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
문법을 통해 식별자의 타입을 추론하는 기술도 가지고 있으니 VSCode 같은 자동 완성 기능을 포함한 환경을 제공하는 편집기를 사용하자.&lt;/p>
&lt;div class="src src-js">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>(); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#a6e22e">currentStorage&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">weigth&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-4" class="outline-3">
&lt;h3 id="headline-4">
Lesson 3
&lt;/h3>
&lt;div id="outline-text-headline-4" class="outline-text-3">
&lt;pre class="example">
구조적 타입 시스템을 제공하는 타입스크립트
&lt;/pre>
&lt;p>
타입은 무엇인가?&lt;/p>
&lt;blockquote>
&lt;p>A type is a classification of data that defines the operations that can be done on that data, the meaning of the data, and the set of allowed values Typing is checked by the compiler and/or run time to ensure the integrity of the data, enforce access restrictions, and interpret the data as meant by the developer&lt;/p>
&lt;ul>
&lt;li>Programming with Types, Vlad Riscutia&lt;/li>
&lt;/ul>
&lt;p>타입은;
해당 데이터에 대해 수행할 수 있는 작업을 구분하고,
데이터 스스로 의미를 규정하고,
컴파일러나 인터프리터가 오류없이 다룰 수 있는 값들에 대한 범위를 제한하며,
접근 제어를 강제하고,
개발자에게 데이터가 뭘 의미하는지 알려 준다.&lt;/p>
&lt;/blockquote>
&lt;p>
내 경우, 로우레벨로 보면 타입은 이 자료가 메모리를 얼마나 차지하고 있느냐, 라고 소개하고 뭉개 버린다.&lt;/p>
&lt;p>
타입은 프로그래밍에 필수 요소다. 아닌 것 같지만 자바스크립트도 타입이 있다.
number, string, boolean 이 대표적인 프리미티브 타입이다. object, array, function 등이 컴포지트 타입에 속한다.&lt;/p>
&lt;p>
자바스트립트는 타입이 있지만 동적 타입 언어에 속한다.&lt;/p>
&lt;div class="src src-js">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">1234&lt;/span>
&lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Onetwothreefour&amp;#39;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>정의된 식별자에 다른 타입의 값을 지정해도 잘 동작하고 심지어 다른 타입끼리 연산도 허용되기도 한다. 😬&lt;/p>
&lt;div class="src src-js">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">val&lt;/span> &lt;span style="color:#f92672">=&lt;/span> { &lt;span style="color:#a6e22e">a&lt;/span> &lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">3&lt;/span> } &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
강타입이 주는 이점은 여러가지가 있다. 타입스크립트는 자바스크립트를 강타입 언어로 한 번 더 포장해 준다.&lt;/p>
&lt;p>
그리고 Shape 이란 용어가 소개되는데 타입스크립트의 구조적structural 타입 시스템을 설명하기 위해 사용된 것으로 보면 된다.&lt;/p>
&lt;div class="src src-js">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-js" data-lang="js">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">person&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">firstName&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Stefan&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">lastName&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Baumgartner&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">age&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#ae81ff">38&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이 코드는&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">Person&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">firstName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;span style="color:#a6e22e">lastName&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>,
&lt;span style="color:#a6e22e">age&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이런 모양shape으로 표현된다.&lt;/p>
&lt;p>
이 모양에 대한 설명은 구조적 타입 시스템으로 계속 반복된다. (이에 상대되는 개념으로 nominal type system 이 있습니다.)&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-5" class="outline-3">
&lt;h3 id="headline-5">
Lesson 4
&lt;/h3>
&lt;div id="outline-text-headline-5" class="outline-text-3">
&lt;pre class="example">
바닐라 자바스크립트에 JSDoc 을 적용하여 타입 추론을 맛보기
&lt;/pre>
&lt;p>
점진적으로 자바스크립트 코드를 개선하는 방법으로 JSDoc 을 추가하여 사용하는 것을 권하고 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://jsdoc.app/">https://jsdoc.app/&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>타입 정보가 없는 자바스크립트 코드에 JSDoc 을 추가하여 타입 정보를 참조할 수 있게 해주고 이는 더 안전한 코드를 만들기 위한 기초로 사용된다.&lt;/p>
&lt;pre class="example">
/**
* @typedef {Object} ShipStorage
* @property {number} max
* @property {StorageItem[]} items
*/
&lt;/pre>
&lt;div class="src src-javascript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="color:#75715e">/** @type ShipStorage */&lt;/span>
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">max&lt;/span>&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">undefined&lt;/span>,
&lt;span style="color:#a6e22e">items&lt;/span>&lt;span style="color:#f92672">:&lt;/span> []
}
&lt;span style="color:#75715e">//...
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">let&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>(); &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span>) {
&lt;span style="color:#a6e22e">currentStorage&lt;/span> &lt;span style="color:#f92672">+=&lt;/span> &lt;span style="color:#a6e22e">storage&lt;/span>.&lt;span style="color:#a6e22e">items&lt;/span>[&lt;span style="color:#a6e22e">i&lt;/span>].&lt;span style="color:#a6e22e">weigth&lt;/span>
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
커스텀 타입을 사용하여 타입 추론 기능을 사용할 수 있다면 더 안전한 코드를 작성할 수 있다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-6" class="outline-3">
&lt;h3 id="headline-6">
Lesson 5
&lt;/h3>
&lt;div id="outline-text-headline-6" class="outline-text-3">
&lt;pre class="example">
타입 선언 파일으로 타입을 재사용하기
&lt;/pre>
&lt;p>
타입스크립트는 자바스크립트의 수퍼셋으로 불리는데 이는 타입스크립트가 자바스크립트의 모든 것을 포함하고 있고 자바스크립트 보다 더 많은 부분을 가지고 있다는 뜻이다.
자바스크립트 코드는 타입스크립트 코드로 동작할 수 있지만 반대는 성립하지 못한다.
그래서 타입스크립트 코드를 브라우저나 노드JS 환경에서 직접 동작시킬 수 없다.&lt;/p>
&lt;p>
자바스크립트와 다른 첫번째 특징은 &amp;#39;.d.ts&amp;#39; 파일로 불리는 타입 선언 시스템이다.
선언된 타입들은 export 키워드로 선언하면 다른 파일에서 참조할 수 있다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">StorageItem&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">weight&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>
}
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">ShipStorage&lt;/span> &lt;span style="color:#f92672">=&lt;/span> {
&lt;span style="color:#a6e22e">max&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>,
&lt;span style="color:#a6e22e">items&lt;/span>: &lt;span style="color:#66d9ef">StorageItem&lt;/span>[]
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>이 선언된 파일을 자바스크립트에서 사용하기 위해 &amp;#39;@ts-check&amp;#39; 아래에 이어&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">/** @typedef { import(&amp;#39;./types.d&amp;#39;).ShipStorage } ShipStorage */&lt;/span>
&lt;span style="color:#75715e">/** @typedef { import(&amp;#39;./types.d&amp;#39;).StorageItem } StorageItem */&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>선언하여 타입 시스템을 활성화 시킬 수 있다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-7" class="outline-3">
&lt;h3 id="headline-7">
Lesson 6
&lt;/h3>
&lt;div id="outline-text-headline-7" class="outline-text-3">
&lt;pre class="example">
엠비언트 타입 정의 파일
&lt;/pre>
&lt;p>
타입 선언을 별도의 파일로 관리하고 재사용 할 수 있다면 더 나은 코딩 환경을 구성할 수 있다. 소스 코드를 수정하지 않고 전역으로 사용할 수 있는 타입을 선언하여 디버깅 환경을 활성화 시키는 기법도 있다.&lt;/p>
&lt;p>
jQuery 같은 라이브러리는 타입스크립트로 개발된 코드가 아니기에 별도의 타입 선언이 담긴 파일을 제공하지 않는다. 대신 앰비언트 타입 정의 파일을 추가하여 타입스크립트 개발 환경에 적용하자.&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">npm i @types/jquery&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-8" class="outline-3">
&lt;h3 id="headline-8">
Lesson 7
&lt;/h3>
&lt;div id="outline-text-headline-8" class="outline-text-3">
&lt;pre class="example">
타입스크립트의 도구들
&lt;/pre>
&lt;p>
NodeJS 패키지 매니저를 통해 타입스크립트 컴파일러를 설치하여 사용할 수 있다.&lt;/p>
&lt;div class="src src-shell">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">npm i -g typescript&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
&amp;#39;tsconfig.json&amp;#39; 파일은 타입스크립트 컴파일러의 컴파일 환경을 정의하고 있다.&lt;/p>
&lt;ol>
&lt;li>target: 컴파일러의 빌드 타겟.&lt;/li>
&lt;li>module: 빌드 파일의 모듈 시스템. commonjs 와 es2020 이 지원된다.&lt;/li>
&lt;li>esModuleInterop: 모듈 시스템과 결부되어 더 깊은 호환성을 제공한다.&lt;/li>
&lt;li>allowJs: .ts 파일이 아닌 .js 파일을 참조할 수 있게 허용한다.&lt;/li>
&lt;li>checkJs: 일반 자바스크립트 파일에도 타입 체크를 적용한다.&lt;/li>
&lt;li>typeRoots: 타입 정의 파일의 위치를 지정한다.&lt;/li>
&lt;/ol>
&lt;p>tsc 의 `–noEmit` 옵션과 `–watch` 옵션도 소개하고 있다.&lt;/p>
&lt;/div>
&lt;/div>
&lt;div id="outline-container-headline-9" class="outline-3">
&lt;h3 id="headline-9">
Lesson 8
&lt;/h3>
&lt;div id="outline-text-headline-9" class="outline-text-3">
&lt;pre class="example">
타입스크립트로 컴파일하기
&lt;/pre>
&lt;p>
타입스크립트는 브라우저에서 바로 실행되지 않기 때문에 컴파일을 하여 자바스크립트로 변환해야 한다. 자바스크립트 파일의 확장자를 `.ts` 로 바꿏는 것만으로도 타입스크립트 파일로 변경된다.
`tsconfig.json` 파일을 생성하고 컴파일러 옵션을 정의하자.&lt;/p>
&lt;div class="src src-json">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-json" data-lang="json">{
&lt;span style="color:#f92672">&amp;#34;compilerOptions&amp;#34;&lt;/span>: {
&lt;span style="color:#f92672">&amp;#34;target&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;ES2020&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;module&amp;#34;&lt;/span>: &lt;span style="color:#e6db74">&amp;#34;es2020&amp;#34;&lt;/span>,
&lt;span style="color:#f92672">&amp;#34;typeRoots&amp;#34;&lt;/span>: [
&lt;span style="color:#e6db74">&amp;#34;@types&amp;#34;&lt;/span>,
&lt;span style="color:#e6db74">&amp;#34;node_modules/@types&amp;#34;&lt;/span>
],
&lt;span style="color:#f92672">&amp;#34;esModuleInterop&amp;#34;&lt;/span>: &lt;span style="color:#66d9ef">true&lt;/span>,
}
}&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>
타입스크립트는 코드에 어노테이션을 추가하여 타입을 정의한다.&lt;/p>
&lt;div class="src src-typescript">
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">addVAT&lt;/span>(&lt;span style="color:#a6e22e">price&lt;/span>: &lt;span style="color:#66d9ef">number&lt;/span>, &lt;span style="color:#a6e22e">vat&lt;/span>: &lt;span style="color:#66d9ef">numer&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">0.2&lt;/span>) {
&lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">price&lt;/span> &lt;span style="color:#f92672">*&lt;/span> (&lt;span style="color:#ae81ff">1&lt;/span> &lt;span style="color:#f92672">+&lt;/span> &lt;span style="color:#a6e22e">vat&lt;/span>)
}
&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">boom&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">addVAT&lt;/span>(&lt;span style="color:#e6db74">&amp;#39;this is not a number!&amp;#39;&lt;/span>)&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div>
&lt;/div></content></item><item><title>Doom Emacs 익숙해지기</title><link>https://faultnote.github.io/posts/doom-emacs-guide-1/</link><pubDate>Sat, 15 Jan 2022 21:38:05 +0900</pubDate><author>soomtong@gmail.com (soomtong)</author><guid>https://faultnote.github.io/posts/doom-emacs-guide-1/</guid><description>xkcd 의 설명을 심각하게 받지 말기 😁 글쓰기와 이맥스 나는 NodeJS 로 백엔드 개발을 하는데 Jetbrains 의 Webstorm 을 사용하고 있다. 예전 Phpstorm 시절부터 고려하면 10년 가까이 젯브레인즈의 제품</description><content>&lt;blockquote>
&lt;p>&lt;a href="https://xkcd.com/378/" title="Explain xkcd: It's 'cause you're dumb.">xkcd&lt;/a> 의 &lt;a href="https://www.explainxkcd.com/wiki/index.php/378:_Real_Programmers" title="The fact that Emacs already has a command for this simply exacerbates the other programmers' frustration with modern coding tools.">설명&lt;/a>을 심각하게 받지 말기 😁&lt;/p>
&lt;/blockquote>
&lt;h2 id="글쓰기와-이맥스">글쓰기와 이맥스&lt;/h2>
&lt;p>나는 NodeJS 로 백엔드 개발을 하는데 Jetbrains 의 Webstorm 을 사용하고 있다.
예전 Phpstorm 시절부터 고려하면 10년 가까이 젯브레인즈의 제품을 사용하고 있는 것이다.
2010년 경에 사용하던 Eclipse 기반의 단축키 일부를 차용하고 몇 년간 손에 맞게 수정한 버전의 단축키 세트를 사용하다 2019년부터 ideavim 을 통해 Vim Model 편집 기반의 조합으로 일부 수정하여 지금까지 사용 중이다.&lt;/p>
&lt;p>코드 작성은 그렇다 하더라도 글을 쓰거나 메모를 남기는 경우에 Webstorm 을 사용하기는 곤란하고 - 특정 시기와 조건에서 한글 입력에 자유롭지 못한 경우가 있었다. 요즘은 큰 문제가 없지만 메모 남기려고 IDE 를 올리는 건 이상하지만, Emacs 라면&amp;hellip; 가능할지도 모르겠다. - 주로 서브라임 텍스트를 활용해 메모를 남기거나 할 일 목록을 적어두는 도구로 사용했다.&lt;/p>
&lt;p>회사 업무를 위한 할일 관리는 주로 웹 브라우저 기반의 서비스(SaaS)를 사용하고 있는데 긴 글을 편집할 때나 마우스로 조작이 필요한 경우가 많아 즐겁지가 않다.&lt;/p>
&lt;p>모달 에디팅에 집착하기 전에는 Markdown 편집이 가능한 도구로 글쓰기를 해왔지만 해피해킹 배열로 키보드를 변경한 후에는 이 마저도 꺼려지게 되었다. 결국 VSCode, Sublime Text 와 그 외 Apple Reminder 나 MS To-do 같은 툴을 통해 글쓰기와 메모/할일 관리 등을 수행하였다.&lt;/p>
&lt;p>요즘 프로그래머들은 Editor War 겪지 않지만 예전에는 이런 취향을 두고 주기적으로 😇 논의를 하는게 재미있는 일이었다.
요즘 웹 개발자들이 이맥스를 경험하는 건 흔치 않지만 나는 운이 좋아 Evil 모드가 있는 &lt;a href="https://www.spacemacs.org/" title="The best editor is neither Emacs nor Vim, it's Emacs and Vim!">Spacemacs&lt;/a> 사용했고, 어떻게 기억하고 있는지 모르지만 바닐라 이맥스를 종료하는 방법도 알고 있었다.&lt;/p>
&lt;p>2021년부터는 Doom Emacs 를 사용하기 위한 시간을 만들어 보고 있다. 국내에는 이맥스 사용자가 얼마나 계신지 모르겠지만 이 편집기(그 이상이지만)에 대한 글도 많지 않다. 그나마 &lt;a href="https://seorenn.github.io/note/doom-emacs.html">seorenn 님의 Emacs 포스트&lt;/a>가 많이 정리되어 있다.&lt;/p>
&lt;h3 id="투두-노트-저널-그리고-작업-모드org-mode">투두, 노트, 저널 그리고 작업 모드(org mode)&lt;/h3>
&lt;p>내 경우, 글을 쓴다는 것에는 복합적인 요소가 포함되어 있다. 생각의 나열일 수 있고 구조화된 맥락인 경우도 있고, 단순히 오늘 벌어진 일이나 앞으로 하고 싶은 일들의 기록일 수도 있다. 그런 면에서 글쓰기를 일반 텍스트 에디터나 워드프로세서에서만 하는 것은 부족했다.
특히 워드프로세서로 글을 쓰는 건 엄청난 고통이다. 한때는 &amp;lsquo;아래아한글&amp;rsquo; 같은 워드 프로세싱 애플리케이션으로 책을 만들어 본 적도 있지만 다시 책을 쓴다면 저작 도구와 편집 도구를 분리하여 사용할 것이다.&lt;/p>
&lt;p>그러고 보니 몇 년 전 학교에서 사용한 책은 VSCode 의 마크다운 모드로 저작을 하고 애플 Pages 로 마무리를 했었다.&lt;/p>
&lt;blockquote>
&lt;p>나의 글쓰기는 책을 편집하는 것이 아니니 텍스트 에디터로도 충분하다. 단, 적당한 에디터가 필요하다.&lt;/p>
&lt;/blockquote>
&lt;p>현 시점에서 이맥스 환경은 이런 요구를 만족시켜주는 최고의 환경이 되고 있다.&lt;/p>
&lt;h4 id="작업-모드">작업 모드&lt;/h4>
&lt;p>이맥스의 &amp;lsquo;오그모드&amp;rsquo; 라고 불리는 작업 모드&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>는 특정 폴더를 대상으로 그 안에 있는 org 파일들에 대해 주어진 조건에 맞는 텍스트를 작업 모드의 대상으로 만들어 준다. 그리고 날짜/시간을 추가하고 트래킹 할 수 있는 기능이 포함되어 있어 일정 관리 도구로도 손색이 없는 수준으로 발전되어 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/watch?v=hnMntOQjs7Q">Emacs Org Mode Demo 2021&lt;/a>&lt;/li>
&lt;/ul>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/hnMntOQjs7Q" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;p>이 5분이 안되는 영상을 보면 &amp;lsquo;Org Mode&amp;rsquo; 의 매력을 느낄 수 있을 것이다.&lt;/p>
&lt;h4 id="투두">투두&lt;/h4>
&lt;p>일반적인 &lt;code>[x]&lt;/code> 같은 표시부터 명시적으로 &lt;code>TODO&lt;/code> 등의 내용으로 할일 목록을 구성할 수 있다. 아래 소개할 &lt;code>org-deirectory&lt;/code> 에 있는 투두 목록이 들어간 파일은 별도의 투두 리스트로 추려질 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>SPC n t&lt;/code>: &lt;code>org-todo-list&lt;/code> 명령으로 할 일이 담긴 버퍼를 연다.&lt;/li>
&lt;/ul>
&lt;p>처음 시작한다면 &lt;code>SPC n n t&lt;/code> 를 통해 기본 todo 파일을 생성하고 시작해 볼수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-python" data-lang="python">&lt;span style="color:#f92672">**&lt;/span> PROJ 프로젝트 이름
&lt;span style="color:#f92672">***&lt;/span> HOLD OOOO 북마크 대응 API 검수
DEADLINE: &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">2022&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">01&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">21&lt;/span> Fri&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">***&lt;/span> STRT XXXX 시청 기록 API 대응
DEADLINE: &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">2022&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">01&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">07&lt;/span> Fri&lt;span style="color:#f92672">&amp;gt;&lt;/span>
&lt;span style="color:#f92672">***&lt;/span> DONE MMMM 처리 스크립트 보완
DEADLINE: &lt;span style="color:#f92672">&amp;lt;&lt;/span>&lt;span style="color:#ae81ff">2022&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">01&lt;/span>&lt;span style="color:#f92672">-&lt;/span>&lt;span style="color:#ae81ff">05&lt;/span> Wed&lt;span style="color:#f92672">&amp;gt;&lt;/span>
: 추가 설명&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>뭐 이런 내용을 작성하면 에디터에서는 이렇게 보인다.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/org_mode-todo-lookslike-1.png" alt="org mode - todo list" title="나쁘지 않다.">&lt;/p>
&lt;p>작업 모드(org mode)에서 기본 구성으로 제공되는 &lt;code>todo.org&lt;/code> 파일만 관리해도 적당히 쓸만한 할 일 관리를 수행할 수 있다.&lt;/p>
&lt;p>&lt;code>SPC n t&lt;/code> 로 즉시 전체 할 일 목록 버퍼를 띄울 수 있다. 할 일들은 꼭 &lt;code>todo.org&lt;/code> 파일 안에 있지 않아도 된다. 작업 모드의 지정된 폴더 안에 있는 org 파일은 모두 대상이 되고 각 아이템에서 기록이 있는 파일로 즉시 이동이 가능하다.&lt;/p>
&lt;p>투두 항목은 단축키로 상태와 중요도를 변경할 수 있고 위/아래로 위치를 이동시킬 수 있다. 따로 잘라내고 붙이는 작업을 하지 않아도 순서를 관리할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>M-j/k&lt;/code>: &lt;code>move subtree up/down&lt;/code> 으로 동작시킬 수 있다. &lt;code>M&lt;/code> 으로 표기되는 Meta 키는 &lt;code>Ctrl&lt;/code> 키와 함께 이맥스에서 사용되는 조합키로 맥OS 에서는 &lt;code>Opt&lt;/code> 키가 그 역할을 한다.&lt;/li>
&lt;/ul>
&lt;p>이맥스의 단축키 시스템은, 아직 그 깊은 곳까지 가지 못했지만 방대하고 유연해서 Vim/Neovim 에서 조합할 수 없었던 기능키를 쉽게 적용할 수 있다.&lt;/p>
&lt;p>좋은 단축키 환경을 구성하는 것은 코더로서도 중요하고 문서 생산성 향상에 매우 중요한 역할을 한다고 믿고 주장하는 입장이어서 Evil-mode Emacs 는 네이티브 Vim 환경보다 훌륭하다.&lt;/p>
&lt;h4 id="노트">노트&lt;/h4>
&lt;p>그동안 서브라임 텍스트로 빠르게 메모하던 내용들을 이맥스의 작업 모드 &lt;code>notes.org&lt;/code> 로 이관해 사용하고 있다.&lt;/p>
&lt;p>이맥스 작업 모드의 노트 생성은 캡처 기능과 함께 기본 템플릿을 구성하고 있어 노트를 생성한 날짜를 따로 입력하지 않아도 편리한 부분이 있다. (이맥스에서는 현재 날짜/시각을 입력하는 별도의 툴이 있기도 하다.)&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/org_mode-calendar-timestamp-1.png" alt="org mode calendar" title="타임스템프는 두 종류가 있다.">&lt;/p>
&lt;p>예전에 하루패드 사용할 때에도 입력 즉시 현재 날짜와 시각을 생성하는 기능이 매우 유용했는데 이맥스에서 그 기분을 다시 맛보니 글쓰기가 더 재밌어진다.&lt;/p>
&lt;ul>
&lt;li>&lt;code>C-c .&lt;/code>: &lt;code>org mode&lt;/code> 환경 안에서 현재 위치에 날짜를 추가한다.&lt;/li>
&lt;li>&lt;code>Shift+H/L&lt;/code>: &lt;code>org mode&lt;/code> 환경의 날짜 텍스트 위에서 이전/다음 일로 변경한다.&lt;/li>
&lt;/ul>
&lt;p>나의 노트에는 짧은 메모들을 담고 있다. 직접 파일을 열고 편집하기 보다 다른 상황 다른 맥락에서 급히 메모 남길 때 사용한다.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/org_mode-first-note.png" alt="org mode my first notes" title="부정확한 정보가 있을 수 있다.">&lt;/p>
&lt;ul>
&lt;li>&lt;code>SPC n n n&lt;/code> 또는 &lt;code>SPC X&lt;/code>: 글로벌 하게 동작하는 키로 현재 컨텍스트를 기반으로 노트를 생성한다.&lt;/li>
&lt;li>&lt;code>SPC n S&lt;/code>: 작업 모드로 지정된 폴더의 모든 문서를 검토해 노트의 헤더로 이동할 수 있다.&lt;/li>
&lt;/ul>
&lt;h4 id="저널">저널&lt;/h4>
&lt;p>저널은 작업 모드에서 제공하는 기본 템플릿 중 가장 맘에 드는 구성이다. 우선 저널 생성을 위해 아무 내용이나 캡처하여 새 파일을 생성하자.&lt;/p>
&lt;ul>
&lt;li>&lt;code>SPC n n j&lt;/code>: 저널 파일이 없으면 새로 만들 수 있고 있으면 현재 컨텍스트를 참조하는 새 항목을 생성한다.&lt;/li>
&lt;/ul>
&lt;p>생성되는 헤더에는 현재 일자와 시각 정보가 있다. 나는 이걸 개인 일기로 사용하고 있다. 이 안에서는 할 일도 함께 정의 할 수 있다.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/org_mode-first-journal.png" alt="org mode first journal" title="가끔은 남 얘기도 쓴다.">&lt;/p>
&lt;p>저널을 통해 자유롭게 글을 쓰고 할 일을 만들고 이들을 정리할 수 있다는 것을 알게 된 후부터 본격적으로 이맥스로 글쓰기를 해보려고 시도하고 있다.&lt;/p>
&lt;h2 id="인박스-구성">인박스 구성&lt;/h2>
&lt;h3 id="업무-일지의-예">업무 일지의 예&lt;/h3>
&lt;p>회사 생활 하면서 매일 매일 일지를 기록하고 있다. 처음에는 마크다운 에디터에서 기록을 시작했고 편집 환경을 Vim 같은 모달 에디팅 환경으로 개선하면서 업무 일지도 Vim 으로 편집했다. 쉘 환경에서 &lt;code>alias&lt;/code> 를 구성하고 구글 드라이브의 특정 파일을 편집하는 명령으로 즉시 즉시 Vim 에서 일지의 내용을 편집했다.&lt;/p>
&lt;p>구글 드라이브로 문서를 동기화하고 있었는데 &lt;code>md&lt;/code> 파일을 프리뷰하는 과정이 필요해 아예 지난 해는 구글 닥스의 문서를 직접 편집했다. 그러다 모달 에디팅 환경이 아닌게 너무 불편해 크롬 익스텐션을 일부 수정해 모달 에디팅 환경을 구성해 사용하기도 했다. 그래도 키보드 만으로 웹 브라우저에서 글을 쓰는 것은 쉽지 않았다.&lt;/p>
&lt;p>올해는 이맥스를 통해 업무 일지를 쓰고 있다. 아이클라우드 동기화를 켜고 인박스에 올해 업무일지 파일(.org)을 만들고 이 문서를 편집한다.&lt;/p>
&lt;p>일정 기반의 할 일 등 아젠다를 작성하여 관리하고 있는데 효율이 좋다.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/org_mode-work-log-journal.png" alt="업무일지2022" title="오그모드 너무 좋아.">&lt;/p>
&lt;h3 id="저장-위치">저장 위치&lt;/h3>
&lt;p>하나의 장비(PC)로 글을 쓰는 환경이 아니라면 기기 간 동기화가 가능한 솔루션을 통해 진행하는 것이 좋다.&lt;/p>
&lt;p>애플의 iCloud 드라이브나 아이클라우드를 통해 지원하는 데스크탑/도큐멘트 폴더 동기화 기능이나 구글 드라이브, 드랍박스 등의 동기화가 가능한 대상을 인박스로 구성하는 것을 추천한다.&lt;/p>
&lt;p>내 경우, 데스크탑에 Inbox 폴더를 두었다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">&lt;span style="color:#75715e"># ~/.doom.d/config.el &lt;/span>
;; If you use &lt;span style="color:#e6db74">`&lt;/span>org&lt;span style="color:#e6db74">`&lt;/span> and don&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>t want your org files in the default location below,
;; change &lt;span style="color:#e6db74">`&lt;/span>org-directory&lt;span style="color:#e6db74">`&lt;/span>. It must be set before org loads!
&lt;span style="color:#f92672">(&lt;/span>setq org-directory &lt;span style="color:#e6db74">&amp;#34;~/Desktop/Inbox&amp;#34;&lt;/span>&lt;span style="color:#f92672">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>자주 보는 곳에 두고 자주 사용할 수 있도록 했다.&lt;/p>
&lt;h3 id="자동-저장">자동 저장&lt;/h3>
&lt;p>Doom Emacs 에 아쉬운 점이 하나 있는데 자동 저장 기능이 디폴트가 아니라는 점이다.
Webstorm 이나 VSCode 를 사용할 때는 항상 자동 저장을 켜고 사용했고 다른 사람에게 안내할 때는 반드시 이 옵션부터 활성화 하라고 지시하기도 했다.&lt;/p>
&lt;p>물론 적당한 확장 코드를 통해서 이 기능을 추가할 수 있는데 그냥 써보기로 했다. Vim 과 다르게 &lt;code>CMD+S&lt;/code> 를 통해 저장이 가능하니 아주 힘든 것은 아니다.
수정된 버퍼가 남아 있는 동안 이맥스를 종료할 경우에 한 번 씩 더 물어보니 습관을 바꿔보는 것도 괜찮겠다.&lt;/p>
&lt;h2 id="둠-이맥스의-미래">둠 이맥스의 미래&lt;/h2>
&lt;p>&lt;a href="https://github.com/hlissner">Henrik Lissner&lt;/a> 가 시작한 이 프로젝트는 조만간 GitHub 의 doomemacs organization 으로 이관될 듯 하다. 그 밑 작업들이 계속 진행되고 있으며 Spacemacs 만큼 중요한 프로젝트가 될 것 같다.&lt;/p>
&lt;p>&lt;img src="https://faultnote.github.io/posts/images/doom-emacs-org-account.png" alt="DoomEmacs Organization in GitHub">&lt;/p>
&lt;p>둠 이맥스가 계획하고 있는 로드맵을 보면 이 에디터 환경에 배팅해도 좋을 듯 하다.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>org mode - 이맥스에서 특정 확장을 위한 구성을 mode 라고 부르고 작업 관리를 위한 가장 유명한 도구로 org mode 가 있다.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item><item><title>2022년에 Doom Emacs 시작하기</title><link>https://faultnote.github.io/posts/doom-emacs-intro/</link><pubDate>Sat, 01 Jan 2022 14:10:21 +0900</pubDate><author>soomtong@gmail.com (soomtong)</author><guid>https://faultnote.github.io/posts/doom-emacs-intro/</guid><description>이맥스는 뭐냐? 오리지널 Vi 보다는 늦지만 Vim 보다 조금 먼저 개발된 텍스트 편집기로 오래되었고, 요즘은 VSCode 가 승리했지만 Emacs vs Vim 성전(聖戰, a holy war)의 핫한 주</description><content>&lt;h2 id="이맥스는-뭐냐">이맥스는 뭐냐?&lt;/h2>
&lt;p>오리지널 Vi 보다는 늦지만 Vim 보다 조금 먼저 개발된 텍스트 편집기로 오래되었고, 요즘은 VSCode 가 승리했지만 Emacs vs Vim 성전(聖戰, a holy war)의 핫한 주인공이었다. (지금 저 &lt;code>vs&lt;/code> 는 VSCode 가 되었고 코딩용 편집기의 de facto 가 되었다.)&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=3r1z5NDXU3s">I do use Vim other Emacs&lt;/a> 커버에 있는 이미지의 클립에서도 볼 수 있듯 연애 보다 중요한 문제다.&lt;/p>
&lt;/blockquote>
&lt;h3 id="vi-와-vim">Vi 와 Vim&lt;/h3>
&lt;p>Vim 은 Vi Improved, 즉, Vi 의 개선판으로 퍼블릭 버전은 1991년에 등장했다.&lt;/p>
&lt;p>오리지널 vi 는 &lt;a href="https://en.wikipedia.org/wiki/Bill_Joy">빌 조이&lt;/a>가 만들었고 대부분의 UNIX 시스템의 에디터로 채용되었다. 이후 &lt;a href="https://en.wikipedia.org/wiki/Bram_Moolenaar">브람 뮬러너&lt;/a>가 Vi Imitation 으로 시작해 Vim 은 지금까지 가장 유명한 에디터 중 하나로 추앙 받고 있다.&lt;/p>
&lt;blockquote>
&lt;p>Vi 와 Vim 에 대한 조금 더 자세한 얘기는 다른 포스트에서 다뤄보기로 하자.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a href="https://jovicailic.org/2014/06/the-history-of-vim/">The History of Vim&lt;/a> 문서에 따르면 이런 히스토리를 가지고 있다.&lt;/p>
&lt;ul>
&lt;li>1988 Vim 1.0 Vi IMitation on the Amiga&lt;/li>
&lt;li>1991 Vim 1.14 First public release (on Fred Fish disk #591)&lt;/li>
&lt;li>1992 Vim 1.22 Port to Unix, renamed to Vi IMproved&lt;/li>
&lt;li>1994 Vim 3.0 Multiple windows&lt;/li>
&lt;li>1996 Vim 4.0 GUI&lt;/li>
&lt;li>1998 Vim 5.0 Syntax highlighting&lt;/li>
&lt;li>2001 Vim 6.0 Folding, multi-language&lt;/li>
&lt;li>2006 Vim 7.0 On the fly spell checker, support for tabs&lt;/li>
&lt;li>2017 — Mastering Vim Quickly book published.&lt;/li>
&lt;/ul>
&lt;p>현재는 8.x 버전이 사용되고 있고 Vim 의 모던 버전인 &lt;a href="https://neovim.io">Neovim&lt;/a> 과 포스트 모던 버전인 &lt;a href="https://helix-editor.com">Helix&lt;/a> 에디터가 떠오르고 있다.&lt;/p>
&lt;h3 id="emacs">Emacs&lt;/h3>
&lt;p>이맥스는 GNU 의 역사와 괘를 같이 한다. GNU 최초의 프로젝트로 알려져 있기도 하다.&lt;/p>
&lt;blockquote>
&lt;p>에디터와 컴파일러, 디버거 개발로 시작된 상용 UNIX 시스템을 대체하는 GNU 프로젝트는 커널 개발이 늦어져 그 자리를 Linux 로 채우게 되었다. 오리지널 GNU 명맥을 유지하는 커널은 &lt;a href="https://www.gnu.org/software/hurd/">GNU/Hurd&lt;/a> 로 계속되고 있다.&lt;/p>
&lt;/blockquote>
&lt;p>GNU 프로젝트의 구루인 RMS - &lt;a href="https://en.wikipedia.org/wiki/Richard_Stallman" title="GNU 의 창시자">리처드 스톨만&lt;/a>이 lisp 프로그래밍 언어로 개발했다. Java 를 개발한 &lt;a href="https://en.wikipedia.org/wiki/Gosling_Emacs" title="자바의 아버지">제임스 고슬링&lt;/a>도 이 에디터의 상용 버전을 개발했던 기록이 있다.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.youtube.com/watch?v=wA7aB-oxjVc">Writing an Emacs implementation in C (Gosling Emacs)&lt;/a> 이 영상 재밌다. Latax 보다 worse 한 이맥스의 전신에 대한 얘기도 나온다.&lt;/p>
&lt;/blockquote>
&lt;p>X-윈도우 시스템을 위한 이맥스가 개발되었고 Vi/Vim 와 다르게 자체 GUI 애플리케이션으로 배포되기도 한다. 스크립트를 통한 확장이 용이하여 다양한 기능이 추가되었고 수많은 해커들의 사랑을 받아 이맥스 안에서 모든 것을 해결할 수 있을 수준의 환경을 구성할 수 있다. 반면, 속도의 향상을 위해 C 네이티브로 구성된 부분이 있지만 elisp (Emacs Lisp) 인터프리터 위에서 수행되는 관계로 상대적으로 무겁다.&lt;/p>
&lt;p>긴 역사를 넘어 그 보다 더 많은 개발자들의 공헌으로 다양한 응용프로그램을 구동할 수 있는 환경을 갖추게 되었고 현대의 IDE 에 버금가는 기능과 그 이상의 시스템으로 발전해왔다.&lt;/p>
&lt;p>이맥스의 단축키는 다양한 시스템에 영향을 주게 되었고 대부분의 쉘에서 이 단축키 일부를 지원하고 있다.&lt;/p>
&lt;p>본격적인 문서는 &lt;a href="https://www.emacswiki.org/emacs?interface=ko" title="이맥스 위키">EmacsWiki 한글&lt;/a> 사이트를 참고하자.&lt;/p>
&lt;h4 id="evil-모드">Evil 모드&lt;/h4>
&lt;p>이맥스의 단축키는 CTRL 키와 META 키 - 윈도우즈의 ALT 나 맥OS 의 Option 키 - 그리고 SUPER 키를 지원하고 이를 응용할 수 있다. 두 단계 이상으로 키 조합을 구성할 수 있어 왠만한 기능은 키보드로 처리가 가능하다.&lt;/p>
&lt;p>하지만 모달 에디팅 환경을 제공하는 Vim 과 다르게 기본적으로 일반적인 에디터가 제공하는 인라인 편집 모드를 제공하고 있다.&lt;/p>
&lt;blockquote>
&lt;p>모달 에디팅에 대해서는 다음에 심각하게 다뤄보도록 하겠습니다.&lt;/p>
&lt;/blockquote>
&lt;p>모달 에디팅의 장점은 다음에 알아보도록 하고 현재, Vim 에 익숙한 사용자들은 이맥의 기본 편집 모드를 바로 사용하는게 불편했다.&lt;/p>
&lt;p>이런 문제는 이맥스의 다양한 확장 기능 중 Evil 모드 시스템을 통해 Vim 과 동일한 모달 에디팅 환경을 제공 받는다.&lt;/p>
&lt;p>Vim 과 같은 모달 에디팅 환경이 제공되는 Emacs 는 Vim 을 넘어서는 텍스트 편집 환경을 제공하는 장점이 있어 Vim 사용자들을 Emacs 사용자로 만드는 중요한 역할을 했다.&lt;/p>
&lt;h2 id="이맥스에-대한-개인-취향">이맥스에 대한 개인 취향&lt;/h2>
&lt;p>나의 이맥스 사용은 주로 적당한 분량의 문서 작성에 사용하고 있다.&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>밥벌이 코딩은 &lt;code>Jetbrains IDE&lt;/code> 에서 하고 짧은 메모나 임시 코드 작성 보관은 아무 에디터에서 진행하고 있는데 대표적으로 &lt;code>Sublime Text&lt;/code> 에서 수행한다. 특히 포매팅 작업이 필요한 코드를 잠시 보관할 때는 이만한 도구가 없다.&lt;/p>
&lt;ol>
&lt;li>매우 빠르고&lt;/li>
&lt;li>스크래치 파일을 잘 관리해주고&lt;/li>
&lt;li>하지만, 빈티지 모드가 영 시원찮고&lt;/li>
&lt;li>구름입력기의 &lt;code>Esc&lt;/code> 키로 로마자 전환 기능을 사용하는데 자동 영문 전환이 매끄럽지 않다.&lt;/li>
&lt;/ol>
&lt;p>어쨋든 긴 글은 이맥스에서 작성하려고 시도하고 있고 - 물론 쌩짜 이맥스를 사용하진 않는다 - 스페이스맥스에서 둠 이맥스까지 오게 되었는데 이 오래된 툴은 확실히 묘한 매력이 있다.&lt;/p>
&lt;p>결국 중요한 것은 적당히 굼뜨지 않고 글쓰기를 위한 물리적 감성적 공간을 충분히 제공해주며&lt;/p>
&lt;ol>
&lt;li>한글 입력에 문제가 없어야 하고&lt;/li>
&lt;li>입력 모드에서 일반 모드로 전환시 로마자 입력 상태로 전환이 잘 되어야 하며&lt;/li>
&lt;li>마크다운 편집이나 스니핏 코드 하이라이트 정도는 되면 좋고&lt;/li>
&lt;li>화살표 키가 없는 키보드를 사용하는 나에겐 적당한 모달 모드를 지원해야 한다.&lt;/li>
&lt;/ol>
&lt;p>여기에 org 모드는 이맥스를 사랑하게 될 것 같은 예상이 든다. (아직 깊이 빠지진 못했다.)&lt;/p>
&lt;h3 id="사용-중인-커스텀">사용 중인 커스텀&lt;/h3>
&lt;p>한동안의 삽질로 몇 가지를 완성했다.&lt;/p>
&lt;ol>
&lt;li>이전 창 위치와 크기를 기억해 복원하고&lt;/li>
&lt;li>적당히 커스텀 단축키를 정의하고&lt;/li>
&lt;li>입력 모드에서 한글을 사용하다 노멀 모드로 전환되면 영문 모드로 변경되는 기능까지 구성했다.&lt;/li>
&lt;/ol>
&lt;p>이 정도까지 완성하였고 이후 서술할 설치 과정까지 삽질을 마치고 보니 2022년부터는 좀 더 본격적으로 사용할 수 있을 듯 하다.&lt;/p>
&lt;h2 id="이맥스-설치-과정">이맥스 설치 과정&lt;/h2>
&lt;p>여러 클라이언트를 설치하고 나름 정리해 본 결과 맥용 커스텀이 가장 잘 되어 있는 아래 패키지를 사용하는 걸로 정했다.&lt;/p>
&lt;p>빌드된 패키지 파일은 여기에서도 직접 구할 수 있다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/railwaycat/homebrew-emacsmacport/releases">https://github.com/railwaycat/homebrew-emacsmacport/releases&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>brew &lt;code>cask&lt;/code> 로 설치하지 않으면 추가 디팬던시를 &lt;code>brew&lt;/code> 가 설치하는데 이게 알아서 관리해준다 해도 소스 수정해서 컴파일하는 작업을 하지 않는 이상 필요가 없다고 본다.&lt;/p>
&lt;p>doom emacs 가이드의 첫 번째 추천 클라이언트 자리를 차지할 만 하다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://emacsformacosx.com">https://emacsformacosx.com&lt;/a> 의 바이너리 보다 훨씬 빠름&lt;/li>
&lt;li>빌드된 패키지를 제공함(emacs-plus 는 컴파일해야 해서&amp;hellip;)&lt;/li>
&lt;/ul>
&lt;p>아무튼 빌드 하지 말자. 여기 &lt;a href="https://github.com/railwaycat/homebrew-emacsmacport">https://github.com/railwaycat/homebrew-emacsmacport&lt;/a> 를 통해 &amp;ndash;cask 로 설치하자.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ brew tap railwaycat/emacsmacport
$ brew install --cask emacs-mac-spacemacs-icon
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>스페이스맥스의 아이콘은 정말 멋지다.&lt;/p>
&lt;/blockquote>
&lt;p>설치가 완료되면 &lt;code>/usr/local/bin&lt;/code> 에 &lt;code>emacs&lt;/code> 실행 스크립트도 추가해 준다. &lt;a href="https://emacsformacosx.com/tips">https://emacsformacosx.com/tips&lt;/a> 에 있는 내용과 같다.&lt;/p>
&lt;p>필요에 따라 &lt;code>alias em='emacs &amp;amp;'&lt;/code> 으로 사용하자.&lt;/p>
&lt;h3 id="doom-커스텀">Doom 커스텀&lt;/h3>
&lt;p>이런 이맥스 편집 환경은 &lt;code>Spacemacs&lt;/code> 같은 통합 세팅 배포 시스템을 선보이게 되었고 조금 더 마이너한 &lt;code>Doom Emacs&lt;/code> 구성이 등장하게 되었다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.spacemacs.org/">Spacemacs: Emacs advanced Kit focused on Evil&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/hlissner/doom-emacs">An Emacs framework for the stubborn martian hacker&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>처음에는 스페이스맥스를 사용했었다. 그러다 한동안 흥미를 잃었다. 글쓰기를 다시 시작하고 있는데 입맛에 맞는 타이핑 환경을 찾아 헤매다 둠 이맥스를 다시 보면서 재미를 느껴고 있다.&lt;/p>
&lt;p>&lt;img src="https://raw.githubusercontent.com/hlissner/doom-emacs/screenshots/main.png" alt="Doom Emacs">&lt;/p>
&lt;p>주 사용처는 취미 코딩 용 &lt;code>Go&lt;/code> 개발 환경 구성과 블로그 글 쓸 때와 메인 에디터로 선택했다. 어설프지만 ORG 모드 연습도 하고 있는데 업무일지 작성할 때 사용 중이다.&lt;/p>
&lt;p>어느 정도 구성을 마치고 본격 사용을 시작했다.&lt;/p>
&lt;p>여유 있을 때 여길 보는게 제일 좋다.&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.youtube.com/playlist?list=PLhXZp00uXBk4np17N39WvB80zgxlZfVwj">DoomCasts: Emacs Doom Screencasts - Zaiste Programming Youtube channel&lt;/a>&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>28개의 클립이 있다. 둠 이맥스의 매력을 느껴 볼 수 있다.&lt;/p>
&lt;/blockquote>
&lt;div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
&lt;iframe src="https://www.youtube.com/embed/rCMh7srOqvw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video">&lt;/iframe>
&lt;/div>
&lt;h3 id="설치-과정">설치 과정&lt;/h3>
&lt;p>둠 이맥스의 설치 과정은 공식 문서를 따라하는게 가장 좋다. 위에서 추천한 이맥스 패키지 고르는 과정만 주의하자.&lt;/p>
&lt;p>&lt;code>fd&lt;/code>,&lt;code>ripgrep&lt;/code> 을 필요로 한다. 미리 설치해 두자.&lt;/p>
&lt;h3 id="재설치">재설치&lt;/h3>
&lt;p>뭔가 세팅이 꼬였을 경우 쉽게 다시 설치할 수 있다.&lt;/p>
&lt;p>둠 이맥스의 구성은 &lt;code>~/.doom.d/&lt;/code> 에 저장되어 있다. 이 코드만 잘 백업해 두도록 하자.&lt;/p>
&lt;blockquote>
&lt;p>나는 dot file 관리를 위해 &lt;code>chezmoi&lt;/code> 를 사용 중이다.&lt;/p>
&lt;/blockquote>
&lt;p>이맥스 애플리케이션을 다시 설치할 필요는 없다. 이맥스의 로컬 세팅을 제거하고 둠 환경을 다시 설치하면 초기 세팅을 복원할 수 있다.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-shell" data-lang="shell">$ rm -rf ~/.emacs.d/.local
$ ~/.emacs.d/bin/doom install
&lt;/code>&lt;/pre>&lt;/div>&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>새해 첫 글에 이맥스를 소개하기 위해 부랴 부랴 작성 중이다.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></content></item></channel></rss>