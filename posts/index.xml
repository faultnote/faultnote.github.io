<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on FaultNote</title><link>https://faultnote.github.io/posts/</link><description>Recent content in Posts on FaultNote</description><generator>Hugo</generator><language>ko</language><lastBuildDate>Sat, 25 Oct 2025 09:25:30 +0900</lastBuildDate><atom:link href="https://faultnote.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Bun 1.3 의 Redis 지원과 RESP</title><link>https://faultnote.github.io/posts/redis-protocol-by-versions/</link><pubDate>Sat, 25 Oct 2025 09:25:30 +0900</pubDate><guid>https://faultnote.github.io/posts/redis-protocol-by-versions/</guid><description>&lt;p&gt;얼마 전 레디스가 라이선스 문제로 Fork 도 일어나고 이에 대응하는 새로운 솔루션들이 등장했지만, 여전히 레디스는 많은 서비스에서 핵심 데이터 저장소로 사용되고 있습니다. (단순 데이터 저장소 이상의 일을 하고 있습니다.)&lt;/p&gt;</description></item><item><title>Heredoc (Here Document) 완전 가이드</title><link>https://faultnote.github.io/posts/heredoc/</link><pubDate>Fri, 09 Aug 2024 16:07:19 +0900</pubDate><guid>https://faultnote.github.io/posts/heredoc/</guid><description>&lt;p&gt;긴 말 필요 없습니다. 빠르게 예제를 본 후 자세히 알아보겠습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;라인 입력 이벤트를 기준으로 동작하기 때문에 마지막 글자 타이핑 후 엔터 키 누르기가 필요합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="사용-예시"&gt;사용 예시&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 파일에 내용 쓰기&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# &amp;#39;EOF&amp;#39; 대신 EOF 사용 가능&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# &amp;#39; 사용 미사용 차이는 있음&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# XXX end 등 임의의 식별자를 사용할 수 있음&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat &lt;span style="color:#e6db74"&gt;&amp;lt;&amp;lt;&amp;#39;EOF&amp;#39; &amp;gt; output.txt
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;This is line 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;This is line 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 또는 이렇게도 사용&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 파이프 연산자 주변 공백은 무시됨&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat &amp;gt; output.txt &lt;span style="color:#e6db74"&gt;&amp;lt;&amp;lt; &amp;#39;END&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;This is line 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;This is line 2
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;END&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# cat 이 아니어도 pipe 가능한 어떤 명령이라도 사용할 수 있음&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;xh http://localhost:1337/api/chat/completions &lt;span style="color:#e6db74"&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;{ &amp;#34;model&amp;#34;: &amp;#34;gemma-3n-e4b-it-lm-4bit&amp;#34;, 
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; &amp;#34;messages&amp;#34;: [ { &amp;#34;role&amp;#34;: &amp;#34;user&amp;#34;, &amp;#34;content&amp;#34;: &amp;#34;Why is the sky blue?&amp;#34; } ] }
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 변수와 함께 사용&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;NAME&lt;span style="color:#f92672"&gt;=&lt;/span&gt;&lt;span style="color:#e6db74"&gt;&amp;#34;John&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat &lt;span style="color:#e6db74"&gt;&amp;lt;&amp;lt;EOF
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;Hello, $NAME!
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;Today is $(date)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;EOF&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#75715e"&gt;# 스크립트에서 도움말 출력&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cat &lt;span style="color:#e6db74"&gt;&amp;lt;&amp;lt;&amp;#39;HELP&amp;#39;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;Usage: script.sh [options]
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;Options:
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; -h Show this help
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt; -v Verbose mode
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#e6db74"&gt;HELP&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="장점"&gt;장점&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;다중 라인 텍스트를 쉽게 처리할 수 있습니다.&lt;/li&gt;
&lt;li&gt;임시 파일 생성 없이 긴 텍스트를 명령에 전달할 수 있습니다.&lt;/li&gt;
&lt;li&gt;스크립트 가독성이 향상됩니다.&lt;/li&gt;
&lt;li&gt;특수 문자 이스케이핑을 걱정할 필요가 없습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 문법은 쉘 스크립팅에서 매우 유용하며, &lt;strong&gt;설정 파일 생성&lt;/strong&gt;, 도움말 출력, 템플릿 처리 등에 자주 사용됩니다.&lt;/p&gt;</description></item><item><title>Learning Zig</title><link>https://faultnote.github.io/posts/learning-zig/</link><pubDate>Mon, 25 Dec 2023 10:00:00 +0900</pubDate><guid>https://faultnote.github.io/posts/learning-zig/</guid><description>&lt;p&gt;Learning Zig 문서를 공개해주셔서 감사합니다.
이 번역(일부 의역)은 개인적인 학습 목적으로 시작하였습니다.&lt;/p&gt;
&lt;h2 id="learning-zig"&gt;Learning Zig&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://www.openmymind.net/learning_zig/"&gt;https://www.openmymind.net/learning_zig/&lt;/a&gt;
위 문서를 보며 주요 내용을 정리합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Zig 프로그래밍 언어에 대한 소개인 Zig 배우기에 오신 것을 환영합니다.
이 가이드는 Zig에 익숙해지는 것을 목표로 합니다. 독자는 특정 언어에 국한하지 않고 일반적인 프로그래밍 경험이 있다고 가정합니다.&lt;/p&gt;</description></item><item><title>Write Deadly Simple Compiler Part 3</title><link>https://faultnote.github.io/posts/write-simple-compiler-3/</link><pubDate>Sat, 07 Jan 2023 20:00:00 +0900</pubDate><guid>https://faultnote.github.io/posts/write-simple-compiler-3/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://notes.eatonphil.com"&gt;Phil&lt;/a&gt; 의 &amp;lsquo;Writing a lisp compiler from scratch in JavaScript&amp;rsquo; 첫 포스트의 세 번째 파트인데 분량이 많아 새 포스트를 열었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;지난 포스트에 이어서&amp;hellip;&lt;/p&gt;
&lt;p&gt;Phil 의 가이드에 마지막 부분은 파싱된 배열을 어셈블리로 변환하는 컴파일 과정을 담고 있다.
그리고 어셈블리를 어셈블! 하는 것으로 첫 포스트를 마치고 있다.&lt;/p&gt;</description></item><item><title>Write Deadly Simple Compiler Part 2</title><link>https://faultnote.github.io/posts/write-simple-compiler-2/</link><pubDate>Sun, 27 Nov 2022 22:00:00 +0900</pubDate><guid>https://faultnote.github.io/posts/write-simple-compiler-2/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://notes.eatonphil.com"&gt;Phil&lt;/a&gt; 의 &amp;lsquo;Writing a lisp compiler from scratch in JavaScript&amp;rsquo; 첫 포스트의 두 번째 파트인데 분량이 많아 새 포스트를 열었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;지난 포스트에 이어서&amp;hellip;&lt;/p&gt;
&lt;p&gt;Phil 의 가이드는 S-expression 을 배열 데이터로 만들고 이를 어셈블리 코드(텍스트)로 기록하도록 하고 있다. 그후 어셈블러를 사용하여 실행 가능한 바이너리 파일을 만든다.&lt;/p&gt;</description></item><item><title>Write Deadly Simple Compiler Part 1</title><link>https://faultnote.github.io/posts/write-simple-compiler-1/</link><pubDate>Sat, 19 Nov 2022 22:00:00 +0900</pubDate><guid>https://faultnote.github.io/posts/write-simple-compiler-1/</guid><description>&lt;blockquote&gt;
&lt;p&gt;내가 처음으로 구독한 개인 메일인 &lt;a href="https://notes.eatonphil.com"&gt;Phil&lt;/a&gt; 의 웹 페이지에 있는 2018년 말 포스트인 &amp;lsquo;Writing a lisp compiler from scratch in JavaScript&amp;rsquo; 를 학습하며 기록한 글이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;우선 Node 환경에서 구동되는 Lisp 컴파일러를 구현하는 투토리얼을 따라가 보도록 한다. 본문은 여기에 있다.&lt;/p&gt;</description></item><item><title>마이크로서비스 도입 이렇게 한다</title><link>https://faultnote.github.io/posts/monolith-to-microservices/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://faultnote.github.io/posts/monolith-to-microservices/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
마이크로서비스 이렇게 한다
&lt;/h2&gt;
&lt;/div&gt;
&lt;div id="outline-container-headline-2" class="outline-2"&gt;
&lt;h2 id="headline-2"&gt;
책 소개
&lt;/h2&gt;
&lt;div id="outline-text-headline-2" class="outline-text-2"&gt;
&lt;p&gt;
샘 뉴먼의 두 번째 마이크로서비스 책인데, 첫 책은 마이크로서비스의 개념, 필요성과 적용 패턴 등이 소개되었을 것 같고 몇 년 후 나온 이 책은 좀 더 실용적인 부분에 집중하여 소개하고 있을 것 같다.
역자는 박재호 님, 케누님과 유튜브 채널을 운영하고 계시는 그분 맞다.&lt;/p&gt;</description></item><item><title>TypeScript 50 Lessons Part 7</title><link>https://faultnote.github.io/posts/typescript-50-lessons-7/</link><pubDate>Sat, 27 Aug 2022 22:00:00 +0900</pubDate><guid>https://faultnote.github.io/posts/typescript-50-lessons-7/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
타입스크립트 in 50 레슨
&lt;/h2&gt;
&lt;div id="outline-text-headline-1" class="outline-text-2"&gt;
&lt;p&gt;
&lt;a href="https://fettblog.eu/"&gt;스테판 바움가트너&lt;/a&gt;가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p&gt;
&lt;div id="outline-container-headline-2" class="outline-3"&gt;
&lt;h3 id="headline-2"&gt;
Lesson 43
&lt;/h3&gt;
&lt;div id="outline-text-headline-2" class="outline-text-3"&gt;
&lt;pre class="example"&gt;
Promise 와 가변variadic 튜플 타입
&lt;/pre&gt;
&lt;p&gt;새로운 기법을 활용해 callback 스타일의 코드를 promisify 하게 만들어 아래와 같은 동작을 기대하는 유틸리티 함수를 만들어보자.&lt;/p&gt;</description></item><item><title>TypeScript 50 Lessons Part 6</title><link>https://faultnote.github.io/posts/typescript-50-lessons-6/</link><pubDate>Sat, 13 Aug 2022 20:00:00 +0900</pubDate><guid>https://faultnote.github.io/posts/typescript-50-lessons-6/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
타입스크립트 in 50 레슨
&lt;/h2&gt;
&lt;div id="outline-text-headline-1" class="outline-text-2"&gt;
&lt;p&gt;
&lt;a href="https://fettblog.eu/"&gt;스테판 바움가트너&lt;/a&gt;가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p&gt;
&lt;div id="outline-container-headline-2" class="outline-3"&gt;
&lt;h3 id="headline-2"&gt;
Lesson 36
&lt;/h3&gt;
&lt;div id="outline-text-headline-2" class="outline-text-3"&gt;
&lt;pre class="example"&gt;
조건부 타입
&lt;/pre&gt;
&lt;p&gt;4장에서 union 과 intersection 을 통해 타입 공간을 확장하고 축소하는 방법과 임의의 데이터 구성에 대해 적당한 집합을 생성하는 법을 알아보았다. 5장에서는 generic 기법을 통해 타입을 공용화하고 데이터가 사용되는 시점에 함수와 클래스의 타입을 적용해 타입을 제약했다. 만약 타입이 애매하면 어떻게 할까? 제너릭하게 하나의 타입으로 묶지 못할 때는? 결과에 따라 타입을 선택해야 할 경우 등을 위해 조건부 타입이 필요하다.
if-else 를 사용하는 것과 같은 방식으로 타입에 조건을 사용하는 것이다. CD 나 LP 들을 파는 커머스 앱을 구성하면서 조건부 타입을 사용하는 방법을 알아보자.&lt;/p&gt;</description></item><item><title>TypeScript 50 Lessons Part 5</title><link>https://faultnote.github.io/posts/typescript-50-lessons-5/</link><pubDate>Sat, 23 Jul 2022 15:00:00 +0900</pubDate><guid>https://faultnote.github.io/posts/typescript-50-lessons-5/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
타입스크립트 in 50 레슨
&lt;/h2&gt;
&lt;div id="outline-text-headline-1" class="outline-text-2"&gt;
&lt;p&gt;
&lt;a href="https://fettblog.eu/"&gt;스테판 바움가트너&lt;/a&gt;가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p&gt;
&lt;div id="outline-container-headline-2" class="outline-3"&gt;
&lt;h3 id="headline-2"&gt;
Lesson 29
&lt;/h3&gt;
&lt;div id="outline-text-headline-2" class="outline-text-3"&gt;
&lt;pre class="example"&gt;
내가 원하는 게 뭔지 모르지만 어떻게 얻을지 알고 있다.
&lt;/pre&gt;
&lt;p&gt;비디오 스트리밍 플랫폼 예제를 통해 제너릭 타입을 살펴보자.&lt;/p&gt;</description></item><item><title>TypeScript 50 Lessons Part 4</title><link>https://faultnote.github.io/posts/typescript-50-lessons-4/</link><pubDate>Sat, 11 Jun 2022 18:00:00 +0900</pubDate><guid>https://faultnote.github.io/posts/typescript-50-lessons-4/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
타입스크립트 in 50 레슨
&lt;/h2&gt;
&lt;div id="outline-text-headline-1" class="outline-text-2"&gt;
&lt;p&gt;
&lt;a href="https://fettblog.eu/"&gt;스테판 바움가트너&lt;/a&gt;가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p&gt;
&lt;div id="outline-container-headline-2" class="outline-3"&gt;
&lt;h3 id="headline-2"&gt;
Lesson 22
&lt;/h3&gt;
&lt;div id="outline-text-headline-2" class="outline-text-3"&gt;
&lt;pre class="example"&gt;
데이터 모델링
&lt;/pre&gt;
&lt;p&gt;레슨 22 는 4장의 시작인데 4장은 타입스크립트를 지탱하고 있는 집합 이론에 대해 소개한다. 특히 유니언 타입과 인터섹션 타입에 대한 논의를 하고 있다.&lt;/p&gt;</description></item><item><title>TypeScript 50 Lessons Part 3</title><link>https://faultnote.github.io/posts/typescript-50-lessons-3/</link><pubDate>Sat, 19 Feb 2022 14:46:31 +0900</pubDate><guid>https://faultnote.github.io/posts/typescript-50-lessons-3/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
타입스크립트 in 50 레슨
&lt;/h2&gt;
&lt;div id="outline-text-headline-1" class="outline-text-2"&gt;
&lt;p&gt;
&lt;a href="https://fettblog.eu/"&gt;스테판 바움가트너&lt;/a&gt;가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p&gt;
&lt;div id="outline-container-headline-2" class="outline-3"&gt;
&lt;h3 id="headline-2"&gt;
Lesson 15
&lt;/h3&gt;
&lt;div id="outline-text-headline-2" class="outline-text-3"&gt;
&lt;pre class="example"&gt;
타입스크립트는 값을 생성하는 영역과 타입을 생성하는 영역으로 구분, 함수는 값을 생성
&lt;/pre&gt;
&lt;p&gt;
함수는 선언부와 본문으로 구성된다. `declare` 키워드는 함수의 본문을 구현하지 않고 코드를 구성할 수 있게 해준다. 인자부와 반환부에 타입을 선언할 수 있다.&lt;/p&gt;</description></item><item><title>로컬 웹 서비스에 Easy-RSA 인증서 적용하기</title><link>https://faultnote.github.io/posts/easyrsa-nginx-guide/</link><pubDate>Sat, 12 Feb 2022 14:05:53 +0900</pubDate><guid>https://faultnote.github.io/posts/easyrsa-nginx-guide/</guid><description>&lt;blockquote&gt;
&lt;p&gt;nginx 서버에 로컬 호스트의 도메인을 위한 인증서를 적용하는 가장 쉽고 빠른 방법&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="개인-키공개-키-기반-인증-시스템"&gt;개인 키/공개 키 기반 인증 시스템&lt;/h2&gt;
&lt;h3 id="pki---public-key-infrastructure-이해하기"&gt;PKI - Public Key Infrastructure 이해하기&lt;/h3&gt;
&lt;p&gt;우리말로 &lt;code&gt;공개 키 기반 인증 시스템&lt;/code&gt; 으로 이해할 수 있는데, 사실 한 쌍의 키가 중심이 되지만 &amp;lsquo;공개 키&amp;rsquo; 라고 불리는 이유는 이 공개 키를 기반으로 암호화 하는 과정이 핵심이라 그런 듯 하다.&lt;/p&gt;</description></item><item><title>TypeScript 50 Lessons Part 2</title><link>https://faultnote.github.io/posts/typescript-50-lessons-2/</link><pubDate>Sat, 22 Jan 2022 12:40:51 +0900</pubDate><guid>https://faultnote.github.io/posts/typescript-50-lessons-2/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
타입스크립트 in 50 레슨
&lt;/h2&gt;
&lt;div id="outline-text-headline-1" class="outline-text-2"&gt;
&lt;p&gt;
&lt;a href="https://fettblog.eu/"&gt;스테판 바움가트너&lt;/a&gt;가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p&gt;
&lt;div id="outline-container-headline-2" class="outline-3"&gt;
&lt;h3 id="headline-2"&gt;
Lesson 9
&lt;/h3&gt;
&lt;div id="outline-text-headline-2" class="outline-text-3"&gt;
&lt;pre class="example"&gt;
any 괜찮은가? 아니, 안괜찮음
&lt;/pre&gt;
&lt;p&gt;
타입스크립트에서 `:` 을 통해 정의되는 타이핑 기법을 레프트핸드 타이핑이라고 한다.&lt;/p&gt;</description></item><item><title>TypeScript 50 Lessons Part 1</title><link>https://faultnote.github.io/posts/typescript-50-lessons-1/</link><pubDate>Fri, 21 Jan 2022 20:47:53 +0900</pubDate><guid>https://faultnote.github.io/posts/typescript-50-lessons-1/</guid><description>&lt;div id="outline-container-headline-1" class="outline-2"&gt;
&lt;h2 id="headline-1"&gt;
타입스크립트 in 50 레슨
&lt;/h2&gt;
&lt;div id="outline-text-headline-1" class="outline-text-2"&gt;
&lt;p&gt;
&lt;a href="https://fettblog.eu/"&gt;스테판 바움가트너&lt;/a&gt;가 스매싱 매거진에서 출판한 서적으로 타입스크립트 주요 주제들에 대해 잘 짚어주고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://typescript-book.com/"&gt;https://typescript-book.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다루고 있는 주제는 아래와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;타입스크립트의 컨셉과 이해하기&lt;/li&gt;
&lt;li&gt;타입스크립트 툴 사용법과 효과적인 사용법&lt;/li&gt;
&lt;li&gt;뭔가 새로 배우지 않고 타입스크립트를 사용하는 법&lt;/li&gt;
&lt;li&gt;구조적 타입 시스템과 시멘틱 그리고 이게 왜 중요한지 이해하기&lt;/li&gt;
&lt;li&gt;유지 관리가 적은 타입을 만들고 재사용하는 법과 점진적으로 개선시키는 법&lt;/li&gt;
&lt;li&gt;프로젝트에 적합한 타입 시스템을 적용하는 법&lt;/li&gt;
&lt;li&gt;타입스크립트 커뮤니티와 언어가 개선되는 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기술적으로 다루는 내용은 아래와 같다.&lt;/p&gt;</description></item><item><title>Doom Emacs 익숙해지기</title><link>https://faultnote.github.io/posts/doom-emacs-guide-1/</link><pubDate>Sat, 15 Jan 2022 21:38:05 +0900</pubDate><guid>https://faultnote.github.io/posts/doom-emacs-guide-1/</guid><description>&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://xkcd.com/378/" title="Explain xkcd: It&amp;#39;s &amp;#39;cause you&amp;#39;re dumb."&gt;xkcd&lt;/a&gt; 의 &lt;a href="https://www.explainxkcd.com/wiki/index.php/378:_Real_Programmers" title="The fact that Emacs already has a command for this simply exacerbates the other programmers&amp;#39; frustration with modern coding tools."&gt;설명&lt;/a&gt;을 심각하게 받지 말기 😁&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id="글쓰기와-이맥스"&gt;글쓰기와 이맥스&lt;/h2&gt;
&lt;p&gt;나는 NodeJS 로 백엔드 개발을 하는데 Jetbrains 의 Webstorm 을 사용하고 있다.
예전 Phpstorm 시절부터 고려하면 10년 가까이 젯브레인즈의 제품을 사용하고 있는 것이다.
2010년 경에 사용하던 Eclipse 기반의 단축키 일부를 차용하고 몇 년간 손에 맞게 수정한 버전의 단축키 세트를 사용하다 2019년부터 ideavim 을 통해 Vim Model 편집 기반의 조합으로 일부 수정하여 지금까지 사용 중이다.&lt;/p&gt;</description></item><item><title>2022년에 Doom Emacs 시작하기</title><link>https://faultnote.github.io/posts/doom-emacs-intro/</link><pubDate>Sat, 01 Jan 2022 14:10:21 +0900</pubDate><guid>https://faultnote.github.io/posts/doom-emacs-intro/</guid><description>&lt;h2 id="이맥스는-뭐냐"&gt;이맥스는 뭐냐?&lt;/h2&gt;
&lt;p&gt;오리지널 Vi 보다는 늦지만 Vim 보다 조금 먼저 개발된 텍스트 편집기로 오래되었고, 요즘은 VSCode 가 승리했지만 Emacs vs Vim 성전(聖戰, a holy war)의 핫한 주인공이었다. (지금 저 &lt;code&gt;vs&lt;/code&gt; 는 VSCode 가 되었고 코딩용 편집기의 de facto 가 되었다.)&lt;/p&gt;</description></item></channel></rss>